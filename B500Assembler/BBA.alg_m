$VERSION 01.004.001                                                     10000000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%10001000          
%                                                                       10002000          
% SOURCE/BBA - B300 Burroughs Basic Assembler                           10003000          
%              Taking us back to the 60's and 70's                      10004000          
%                                                                       10005000          
% Written by: Curt Timmerman                                            10006000          
%                                                                       10007000          
%   CANDE: CO AS BBA                                                    10008000          
%     for use with test WFL                                             10009000          
%                                                                       10010000          
% Files:                                                                10011000          
%   CARD                                                                10012000          
%     Assembler source input (INTMODE = EBCDIC) 80 char fixed           10013000          
%     See "Source file format" below                                    10014000          
%   PRINTOUT                                                            10015000          
%     Assembled print report                                            10016000          
%       Listing with assigned addresses and errors                      10017000          
%       Reference listing                                               10018000          
%       Memory map                                                      10019000          
%   OBJECT                                                              10020000          
%     Punch card object output                                          10021000          
%     60 characters (5 instructions) per card                           10022000          
%   REM                                                                 10023000          
%     Used for testing, running the assembler on CANDE                  10024000          
%                                                                       10025000          
% Program flow:                                                         10026000          
%   o FIRST_PASS                                                        10027000          
%     Reads source into an array, each line can be accessed via handle  10028000          
%     Set memory location (index) and length (0-12) where needed        10029000          
%     Builds table of source lines containing a reference               10030000          
%   o SECOND_PASS                                                       10031000          
%     Sorts references to find duplicates and build index               10032000          
%     Constructs instructions and in source array                       10033000          
%     Looks up reference addresses.                                     10034000          
%     Allocates constant values.                                        10035000          
%     Prints memory location and instruction/data with the source code  10036000          
%   o REFERENCE_LISTING                                                 10037000          
%     Prints sorted list of references (page number + reference char)   10038000          
%     Includes count of reference usage                                 10039000          
%   o DUMP_MEMORY_MAP                                                   10040000          
%     Prints raw memory dump generated from compile                     10041000          
%                                                                       10042000          
% Errors:                                                               10043000          
%   O - Unknown op code                                                 10044000          
%   U - Valid op code, unhandled, changed to NOP                        10045000          
%   M - M variant error                                                 10046000          
%   N - N variant error                                                 10047000          
%   A - AAA address error                                               10048000          
%   B - BBB address error                                               10049000          
%   C - CCC address error                                               10050000          
%   R - Page/Ref error, duplicate                                       10051000          
%                                                                       10052000          
% Notes:                                                                10053000          
%   o Only a basic subset of the B300 instructions have been            10054000          
%     implemented.                                                      10055000          
%   o The B300 uses a 6 bit character set. The object code is created   10056000          
%     in an 8 bit mode (upper 2 bits unused). Conversion TBD.           10057000          
%   o There are a few characters on the B300 not supported on the       10058000          
%     ClearPath. There defines and ClearPath substitution:              10059000          
%       C_GROUP_MARK: "t" Appears as a left arrow.                      10060000          
%       C_MINUS_ZERO: "x" Appears as a lower case 'x'.                  10061000          
%       C_LEQ: "l" Less than or equal (1 character).                    10062000          
%       C_GEQ: "g" Greater than or equal (1 character).                 10063000          
%       C_NEQ: "^" Appears as an equal sign with a line through it      10064000          
%                                                                       10065000          
%-----------------------------------------------------------------------10066000          
% Source file format (80 column punch card):                            10067000          
%   Cols.. Name.. Description...........................                10068000          
%   1-6    IDENT  Identification number (ignored)                       10069000          
%   7-9    Op     Operation code                                        10070000          
%   10-11  M      M variant, usually A length                           10071000          
%   12-13  N      N variant, usually B length                           10072000          
%   14-17  A      A address                                             10073000          
%   18-21  B      B address                                             10074000          
%   22-25  C      C address                                             10075000          
%   26-27  Page   Page number                                           10076000          
%   28     Ref    Reference character                                   10077000          
%                 Page/Ref are symbolic ID (Ref neq space)              10078000          
%   29-31  Size   Size of constants                                     10079000          
%   32-43         Constants                                             10080000          
%   44-77         Remarks (ignored)                                     10081000          
%   78-80         Line (ignored)                                        10082000          
%                                                                       10083000          
%                                                                       10084000          
%                                                                       10085000          
%-----------------------------------------------------------------------10086000          
% Op codes implemented:                                                 10087000          
%  "ADD" - Add                                                          10088000          
%  "ADM" - Address modify                                               10089000          
%  "BRC" - Branch conditional                                           10090000          
%  "BRD" - No                                                           10091000          
%  "BRU" - Branch unequal                                               10092000          
%  "BSP" - No                                                           10093000          
%  "BWR" - No                                                           10094000          
%  "CAE" - Compare alpha equal                                          10095000          
%  "CAU" - Compare alpha unequal                                        10096000          
%  "CNE" - Compare numeric equal                                        10097000          
%  "CNU" - Compare numeric unequal                                      10098000          
%  "CRD" - Card read                                                    10099000          
%  "CTL" - No                                                           10100000          
%  "CZE" - Compare zone equal                                           10101000          
%  "CZU" - compare zone unequal                                         10102000          
%  "DCI" - Datacomm interrogate (see note 2)                            10103000          
%  "DCR" - Datacomm read (see note 2)                                   10104000          
%  "DCW" - Datacomm write (see note 2)                                  10105000          
%  "DFC" - Disk file check (see note 1)                                 10106000          
%  "DFI" - Disk file interrogate (see note 1)                           10107000          
%  "DFR" - Disk file read (see note 1)                                  10108000          
%  "DFW" - Disk file write (see note 1)                                 10109000          
%  "DIV" - Divide                                                       10110000          
%  "HLT" - Halt and branch                                              10111000          
%  "MSK" - Mask                                                         10112000          
%  "MUL" - Multiply                                                     10113000          
%  "MWR" - No                                                           10114000          
%  "NOP" - No OP                                                        10115000          
%  "PCH" - Punch card                                                   10116000          
%  "PRD" - No                                                           10117000          
%  "PRL" - No                                                           10118000          
%  "PRT" - Printer write (see note 1)                                   10119000          
%  "PRW" - No                                                           10120000          
%  "PSB" - No                                                           10121000          
%  "PSF" - No                                                           10122000          
%  "PWR" - No                                                           10123000          
%  "RSB" - Reset bit                                                    10124000          
%  "RWD" - No                                                           10125000          
%  "SBT" - Set bit                                                      10126000          
%  "SKL" - No                                                           10127000          
%  "SKP"                                                                10128000          
%  "SPO" - Supervisory printer out                                      10129000          
%  "SPR" - Supervisory printer read                                     10130000          
%  "SRD" - No                                                           10131000          
%  "SRF" - No                                                           10132000          
%  "SUB" - Subtract                                                     10133000          
%  "TCB" - Transfer character and branch                                10134000          
%  "TER" - No                                                           10135000          
%  "TFR" - Transfer character                                           10136000          
%  "TFZ" - Transfer zone                                                10137000          
%  "TRD" - No                                                           10138000          
%  "TZB" - Transfer zone and branch                                     10139000          
%  "TWR" - No                                                           10140000          
%---- Psuedo OP codes and directives                                    10141000          
%  "ALC" - No                                                           10142000          
%  "SLA" - Set location address (3 character)                           10143000          
%  "SLI" - Set current memory location to integer offset                10144000          
%          This is non-standard, used for testing memory assignments    10145000          
%  "HDG" - Comment line                                                 10146000          
%  "LNK" - Link to subroutine                                           10147000          
%  "END" - End of source                                                10148000          
%                                                                       10149000          
% Notes:                                                                10150000          
%   1. Low order M source is copied directly to instruction M variant   10151000          
%   2. Low order N source is copied directly to instruction N variant   10152000          
%                                                                       10153000          
%                                                                       10154000          
%                                                                       10155000          
%                                                                       10156000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%10157000          
%                                                                       10158000          
$SET ERRORLIMIT = 5                                                     10159000          
%                                                                       10160000          
 BEGIN                                                                  10161000          
%                                                                       10162000          
 DEFINE                                                                 10163000          
%----- BA8421 <--- BITS on B-300                                        10164000          
     B_000000           = 48"00" # ,    % Zero                          10165000          
     B_000001           = 48"01" # ,    % "1"                           10166000          
     B_000010           = 48"02" # ,    % "2"                           10167000          
     B_000011           = 48"03" # ,    % "3"                           10168000          
     B_000100           = 48"04" # ,    % "4"                           10169000          
     B_000101           = 48"05" # ,    % "5"                           10170000          
     B_000110           = 48"06" # ,    % "6"                           10171000          
     B_000111           = 48"07" # ,    % "7"                           10172000          
     B_001000           = 48"08" # ,    % "8"                           10173000          
     B_001001           = 48"09" # ,    % "9"                           10174000          
     B_001010           = 48"0A" # ,    % "#"                           10175000          
     B_001011           = 48"0B" # ,    % "@"                           10176000          
     B_001100           = 48"0C" # ,    % "?"                           10177000          
     B_001101           = 48"0D" # ,    % ":"                           10178000          
     B_001110           = 48"0E" # ,    % ">"                           10179000          
     B_001111           = 48"0F" # ,    % GEQ                           10180000          
     B_010000           = 48"10" # ,    % "+"                           10181000          
     B_010001           = 48"11" # ,    % "A"                           10182000          
     B_010010           = 48"12" # ,    % "B"                           10183000          
     B_010011           = 48"13" # ,    % "C"                           10184000          
     B_010100           = 48"14" # ,    % "D"                           10185000          
     B_010101           = 48"15" # ,    % "E"                           10186000          
     B_010110           = 48"16" # ,    % "F"                           10187000          
     B_010111           = 48"17" # ,    % "G"                           10188000          
     B_011000           = 48"18" # ,    % "H"                           10189000          
     B_011001           = 48"19" # ,    % "I"                           10190000          
     B_011010           = 48"1A" # ,    % "."                           10191000          
     B_011011           = 48"1B" # ,    % "["                           10192000          
     B_011100           = 48"1C" # ,    % "&"                           10193000          
     B_011101           = 48"1D" # ,    % "("                           10194000          
     B_011110           = 48"1E" # ,    % "<"                           10195000          
     B_011111           = 48"1F" # ,    % <- Tape mark, control         10196000          
     B_100000           = 48"20" # ,    % "x" Control                   10197000          
     B_100001           = 48"21" # ,    % "J"                           10198000          
     B_100010           = 48"22" # ,    % "K"                           10199000          
     B_100011           = 48"23" # ,    % "L"                           10200000          
     B_100100           = 48"24" # ,    % "M"                           10201000          
     B_100101           = 48"25" # ,    % "N"                           10202000          
     B_100110           = 48"26" # ,    % "O"                           10203000          
     B_100111           = 48"27" # ,    % "P"                           10204000          
     B_101000           = 48"28" # ,    % "Q"                           10205000          
     B_101001           = 48"29" # ,    % "R"                           10206000          
     B_101010           = 48"2A" # ,    % "$"                           10207000          
     B_101011           = 48"2B" # ,    % "*"                           10208000          
     B_101100           = 48"2C" # ,    % "-"                           10209000          
     B_101101           = 48"2D" # ,    % ")"                           10210000          
     B_101110           = 48"2E" # ,    % ";"                           10211000          
     B_101111           = 48"2F" # ,    % LEQ                           10212000          
     B_110000           = 48"30" # ,    % Space                         10213000          
     B_110001           = 48"31" # ,    % "/"                           10214000          
     B_110010           = 48"32" # ,    % "S"                           10215000          
     B_110011           = 48"33" # ,    % "T"                           10216000          
     B_110100           = 48"34" # ,    % "U"                           10217000          
     B_110101           = 48"35" # ,    % "V"                           10218000          
     B_110110           = 48"36" # ,    % "W"                           10219000          
     B_110111           = 48"37" # ,    % "X"                           10220000          
     B_111000           = 48"38" # ,    % "Y"                           10221000          
     B_111001           = 48"39" # ,    % "Z"                           10222000          
     B_111010           = 48"3A" # ,    % ","                           10223000          
     B_111011           = 48"3B" # ,    % "%"                           10224000          
     B_111100           = 48"3C" # ,    % NEQ                           10225000          
     B_111101           = 48"3D" # ,    % "="                           10226000          
     B_111110           = 48"3E" # ,    % "]"                           10227000          
     B_111111           = 48"3F" # ,    % " Double quote                10228000          
%                                                                       10229000          
     B_ZERO             = B_000000 # ,  % "0"                           10230000          
     B_ONE              = B_000001 # ,  % "1"                           10231000          
     B_TWO              = B_000010 # ,  % "2"                           10232000          
     B_THREE            = B_000011 # ,  % "3"                           10233000          
     B_FOUR             = B_000100 # ,  % "4"                           10234000          
     B_FIVE             = B_000101 # ,  % "5"                           10235000          
     B_SIX              = B_000110 # ,  % "6"                           10236000          
     B_EIGHT            = B_001000 # ,  % "8"                           10237000          
     B_NINE             = B_001001 # ,  % "9"                           10238000          
     B_POUND            = B_001010 # ,  % "#"                           10239000          
     B_AT               = B_001011 # ,  % "@"                           10240000          
     B_AMP              = B_011100 # ,  % "&"                           10241000          
     B_SPACE            = B_110000 # ,  % " "                           10242000          
     B_ADD_OP           = B_000001 # ,  % "1"                           10243000          
     B_ADM_OP           = B_100001 # ,  % "J"                           10244000          
     B_BBE_OP           = B_110011 # ,  % "T" Branch bit equal          10245000          
     B_BBu_OP           = B_110011 # ,  % "T" Branch bit unequal        10246000          
     B_BRC_OP           = B_000110 # ,  % "6" Branch conditional        10247000          
     B_BRU_OP           = B_000110 # ,  % "6" Branch unconditional      10248000          
     B_CAE_OP           = B_000101 # ,  % "5"                           10249000          
     B_CAU_OP           = B_000101 # ,  % "5"                           10250000          
     B_CNE_OP           = B_000101 # ,  % "5"                           10251000          
     B_CNU_OP           = B_000101 # ,  % "5"                           10252000          
     B_CZE_OP           = B_000101 # ,  % "5"                           10253000          
     B_CRD_OP           = B_001010 # ,  % "#"                           10254000          
     B_CZU_OP           = B_000101 # ,  % "5"                           10255000          
     B_DCI_OP           = B_100010 # ,  % "L" Datacomm interrogate      10256000          
     B_DCR_OP           = B_100010 # ,  % "L" Datacomm read             10257000          
     B_DCW_OP           = B_100010 # ,  % "L" Datacomm write            10258000          
     B_DFC_OP           = B_100010 # ,  % "K" Disk file check           10259000          
     B_DFI_OP           = B_100010 # ,  % "K" Disk file interrogate     10260000          
     B_DFR_OP           = B_100010 # ,  % "K" Disk file read            10261000          
     B_DFW_OP           = B_100010 # ,  % "K" Disk file write           10262000          
     B_DIV_OP           = B_000100 # ,  % "4" Divide                    10263000          
     B_HLT_OP           = B_001001 # ,  % "9" Halt                      10264000          
     B_ICP_OP           = B_110011 # ,  % "T" Interrogate card punch    10265000          
     B_ICR_OP           = B_110011 # ,  % "T" Interrogate card reader   10266000          
     B_ILP_OP           = B_110011 # ,  % "T" Interrogate line printer  10267000          
     B_IMR_OP           = B_110011 # ,  % "T" Interrogate mag tape ready10268000          
     B_IMW_OP           = B_110011 # ,  % "T" Interrogate mag tape write10269000          
     B_IPL_OP           = B_110011 # ,  % "T" Interrogate lister        10270000          
     B_IPP_OP           = B_110011 # ,  % "T" Interrogate paper tape pch10271000          
     B_IPR_OP           = B_110011 # ,  % "T" Interrogate paper tape rd 10272000          
     B_ISP_OP           = B_110011 # ,  % "T" Interrogate sup printer   10273000          
     B_MUL_OP           = B_000011 # ,  % "3" Multiply                  10274000          
     B_MSK_OP           = B_001000 # ,  % "8" Mask                      10275000          
     B_NOP_OP           = B_110000 # ,  % " " No operation              10276000          
     B_PCH_OP           = B_001011 # ,  % "@" Card punch                10277000          
     B_PRT_OP           = B_010001 # ,  % "A" Print on printer          10278000          
     B_RSB_OP           = B_110011 # ,  % "T" Reset bit                 10279000          
     B_SBT_OP           = B_110011 # ,  % "T" Set bit                   10280000          
     B_SKP_OP           = B_010010 # ,  % "B" Skip on printer           10281000          
     B_SPO_OP           = B_101000 # ,  % "8" Supervisory write         10282000          
     B_SPR_OP           = B_101000 # ,  % "8" Supervisory read          10283000          
     B_SUB_OP           = B_000010 # ,  % "2" Subtract                  10284000          
     B_TCB_OP           = B_000111 # ,  % "7" Tramsfer char, branch     10285000          
     B_TFR_OP           = B_000111 # ,  % "7" Transfer char             10286000          
     B_TFZ_OP           = B_100111 # ,  % "P" Transfer zone             10287000          
     B_TZB_OP           = B_100111 # ,  % "P" Transfer zone, branch     10288000          
     B_1_BIT            = [0:1] # ,                                     10289000          
     B_2_BIT            = [1:1] # ,                                     10290000          
     B_4_BIT            = [2:1] # ,                                     10291000          
     B_8_BIT            = [3:1] # ,                                     10292000          
     B_A_BIT            = [4:1] # ,                                     10293000          
     B_B_BIT            = [5:1] # ,                                     10294000          
     C_GEQ              = "g" # ,                                       10295000          
     C_GROUP_MARK        = "t" # ,                                      10296000          
     C_LEQ              = "l" # ,                                       10297000          
     C_MINUS_ZERO       = "x" # ,                                       10298000          
     C_NEQ              = "^" # ,                                       10299000          
     B_SECTION_SIZE     = 4800 # ,                                      10300000          
     B_19200_MEMORY     = (B_SECTION_SIZE * 4) # ,                      10301000          
     B_9600_MEMORY      = (B_SECTION_SIZE * 2) # ,                      10302000          
     B_4800_MEMORY      = B_SECTION_SIZE # ,                            10303000          
     B_MEMORY_SIZE      = B_19200_MEMORY # ,                            10304000          
     LAST_DEFINE        = #                                             10305000          
     ;                                                                  10306000          
 TRANSLATETABLE                                                         10307000          
     C_TO_B                                                             10308000          
         (                                                              10309000          
         "0" TO B_000000 ,                                              10310000          
         "1" TO B_000001 ,                                              10311000          
         "2" TO B_000010 ,                                              10312000          
         "3" TO B_000011 ,                                              10313000          
         "4" TO B_000100 ,                                              10314000          
         "5" TO B_000101 ,                                              10315000          
         "6" TO B_000110 ,                                              10316000          
         "7" TO B_000111 ,                                              10317000          
         "8" TO B_001000 ,                                              10318000          
         "9" TO B_001001 ,                                              10319000          
         "#" TO B_001010 ,                                              10320000          
         "@" TO B_001011 ,                                              10321000          
         "?" TO B_001100 ,                                              10322000          
         ":" TO B_001101 ,                                              10323000          
         ">" TO B_001110 ,                                              10324000          
         C_GEQ TO B_001111 ,                                            10325000          
         "+" TO B_010000 ,                                              10326000          
         "A" TO B_010001 ,                                              10327000          
         "B" TO B_010010 ,                                              10328000          
         "C" TO B_010011 ,                                              10329000          
         "D" TO B_010100 ,                                              10330000          
         "E" TO B_010101 ,                                              10331000          
         "F" TO B_010110 ,                                              10332000          
         "G" TO B_010111 ,                                              10333000          
         "H" TO B_011000 ,                                              10334000          
         "I" TO B_011001 ,                                              10335000          
         "." TO B_011010 ,                                              10336000          
         "[" TO B_011011 ,                                              10337000          
         "&" TO B_011100 ,                                              10338000          
         "(" TO B_011101 ,                                              10339000          
         "<" TO B_011110 ,                                              10340000          
         C_GROUP_MARK TO B_011111 ,                                     10341000          
         C_MINUS_ZERO TO B_100000 ,                                     10342000          
         "J" TO B_100001 ,                                              10343000          
         "K" TO B_100010 ,                                              10344000          
         "L" TO B_100011 ,                                              10345000          
         "M" TO B_100100 ,                                              10346000          
         "N" TO B_100101 ,                                              10347000          
         "O" TO B_100110 ,                                              10348000          
         "P" TO B_100111 ,                                              10349000          
         "Q" TO B_101000 ,                                              10350000          
         "R" TO B_101001 ,                                              10351000          
         "$" TO B_101010 ,                                              10352000          
         "*" TO B_101011 ,                                              10353000          
         "-" TO B_101100 ,                                              10354000          
         ")" TO B_101101 ,                                              10355000          
         ";" TO B_101110 ,                                              10356000          
         C_LEQ TO B_101111 ,                                            10357000          
         " " TO B_110000 ,                                              10358000          
         "/" TO B_110001 ,                                              10359000          
         "S" TO B_110010 ,                                              10360000          
         "T" TO B_110011 ,                                              10361000          
         "U" TO B_110100 ,                                              10362000          
         "V" TO B_110101 ,                                              10363000          
         "W" TO B_110110 ,                                              10364000          
         "X" TO B_110111 ,                                              10365000          
         "Y" TO B_111000 ,                                              10366000          
         "Z" TO B_111001 ,                                              10367000          
         "," TO B_111010 ,                                              10368000          
         "%" TO B_111011 ,                                              10369000          
         C_NEQ TO B_111100 ,                                            10370000          
         "=" TO B_111101 ,                                              10371000          
         "]" TO B_111110 ,                                              10372000          
         """ TO B_111111                                                10373000          
         ) ,                                                            10374000          
     B_TO_C                                                             10375000          
         (                                                              10376000          
         EBCDIC TO "|" ,        % This indicated invalid code           10377000          
         B_000000 TO "0" ,                                              10378000          
         B_000001 TO "1" ,                                              10379000          
         B_000010 TO "2" ,                                              10380000          
         B_000011 TO "3" ,                                              10381000          
         B_000100 TO "4" ,                                              10382000          
         B_000101 TO "5" ,                                              10383000          
         B_000110 TO "6" ,                                              10384000          
         B_000111 TO "7" ,                                              10385000          
         B_001000 TO "8" ,                                              10386000          
         B_001001 TO "9" ,                                              10387000          
         B_001010 TO "#" ,                                              10388000          
         B_001011 TO "@" ,                                              10389000          
         B_001100 TO "?" ,                                              10390000          
         B_001101 TO ":" ,                                              10391000          
         B_001110 TO ">" ,                                              10392000          
         B_001111 TO C_GEQ ,                                            10393000          
         B_010000 TO "+" ,                                              10394000          
         B_010001 TO "A" ,                                              10395000          
         B_010010 TO "B" ,                                              10396000          
         B_010011 TO "C" ,                                              10397000          
         B_010100 TO "D" ,                                              10398000          
         B_010101 TO "E" ,                                              10399000          
         B_010110 TO "F" ,                                              10400000          
         B_010111 TO "G" ,                                              10401000          
         B_011000 TO "H" ,                                              10402000          
         B_011001 TO "I" ,                                              10403000          
         B_011010 TO "." ,                                              10404000          
         B_011011 TO "[" ,                                              10405000          
         B_011100 TO "&" ,                                              10406000          
         B_011101 TO "(" ,                                              10407000          
         B_011110 TO "<" ,                                              10408000          
         B_011111 TO C_GROUP_MARK ,                                     10409000          
         B_100000 TO C_MINUS_ZERO ,                                     10410000          
         B_100001 TO "J" ,                                              10411000          
         B_100010 TO "K" ,                                              10412000          
         B_100011 TO "L" ,                                              10413000          
         B_100100 TO "M" ,                                              10414000          
         B_100101 TO "N" ,                                              10415000          
         B_100110 TO "O" ,                                              10416000          
         B_100111 TO "P" ,                                              10417000          
         B_101000 TO "Q" ,                                              10418000          
         B_101001 TO "R" ,                                              10419000          
         B_101010 TO "$" ,                                              10420000          
         B_101011 TO "*" ,                                              10421000          
         B_101100 TO "-" ,                                              10422000          
         B_101101 TO ")" ,                                              10423000          
         B_101110 TO ";" ,                                              10424000          
         B_101111 TO C_LEQ ,                                            10425000          
         B_110000 TO " " ,                                              10426000          
         B_110001 TO "/" ,                                              10427000          
         B_110010 TO "S" ,                                              10428000          
         B_110011 TO "T" ,                                              10429000          
         B_110100 TO "U" ,                                              10430000          
         B_110101 TO "V" ,                                              10431000          
         B_110110 TO "W" ,                                              10432000          
         B_110111 TO "X" ,                                              10433000          
         B_111000 TO "Y" ,                                              10434000          
         B_111001 TO "Z" ,                                              10435000          
         B_111010 TO "," ,                                              10436000          
         B_111011 TO "%" ,                                              10437000          
         B_111100 TO C_NEQ ,                                            10438000          
         B_111101 TO "=" ,                                              10439000          
         B_111110 TO "]" ,                                              10440000          
         B_111111 TO """                                                10441000          
         ) ,                                                            10442000          
     SPACE_TO_ZERO                                                      10443000          
         (                                                              10444000          
         EBCDIC TO EBCDIC ,                                             10445000          
         " " TO "0"                                                     10446000          
         )                                                              10447000          
     ;                                                                  10448000          
%                                                                       10449000          
 EBCDIC ARRAY                                                           10450000          
     MM_DD_YY [0:7] ,                   % mm/dd/yy                      10451000          
     B_MEMORY [0:(B_MEMORY_SIZE - 1)] ,                                 10452000          
     B_ADDRESS_SECTIONS [0:39] ,                                        10453000          
     B_ADDRESS_FIELDS [0:9] ,                                           10454000          
     B_ADDRESS_CHARS [0:11]                                             10455000          
     ;                                                                  10456000          
 INTEGER                                                                10457000          
     C_MEMORY_INDEX ,                                                   10458000          
     C_MEMORY_INDEX_MAX ,                                               10459000          
     C_SOURCE_HANDLE ,                                                  10460000          
     C_CARD_COUNT ,                                                     10461000          
     C_ERROR_COUNT                                                      10462000          
     ;                                                                  10463000          
 DEFINE                                                                 10464000          
     C_SOURCE_REC_LEN           = 40 # ,        % WORDS                 10465000          
     C_SOURCE_CARD_OFFSET       = 0 # ,         % Source image          10466000          
     C_SOURCE_CARD_LENGTH       = 80 # ,        % Tab card length, bytes10467000          
     C_SOURCE_MEM_LEN_OFFSET    = 14 # ,        % Obj length            10468000          
     C_SOURCE_MEM_IDX_OFFSET    = 15 # ,        % Obj location          10469000          
     C_SOURCE_MEM_OBJ_OFFSET    = 16 # ,        % Obj code              10470000          
     C_SOURCE_MEM_OBJ_LENGTH    = 12 # ,        % Obj code length       10471000          
     C_SOURCE_ERRORS_OFFSET     = 18 # ,        % Obj code              10472000          
     C_SOURCE_ERRORS_LENGTH     = 12 # ,        % OMNABCR               10473000          
     C_SOURCE_CARD_NUMBER_OFFSET = 20 # ,       % Input card number     10474000          
%                                                                       10475000          
%---- Assembler source fields:                                          10476000          
     C_SOURCE_IDENT (HAN)       =                                       10477000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 0) # ,     10478000          
     C_SOURCE_OP_CODE (HAN)     =                                       10479000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 6) # ,     10480000          
     C_SOURCE_M (HAN)           =                                       10481000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 9) # ,     10482000          
     C_SOURCE_N (HAN)           =                                       10483000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 11) # ,    10484000          
     C_SOURCE_A_ADDRESS (HAN)   =                                       10485000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 13) # ,    10486000          
     C_SOURCE_B_ADDRESS (HAN)   =                                       10487000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 17) # ,    10488000          
     C_SOURCE_C_ADDRESS (HAN)   =                                       10489000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 21) # ,    10490000          
     C_SOURCE_PAGE (HAN)        =                                       10491000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 25) # ,    10492000          
     C_SOURCE_REFERENCE (HAN)   =                                       10493000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 27) # ,    10494000          
     C_SOURCE_SIZE (HAN)        =                                       10495000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 28) # ,    10496000          
     C_SOURCE_CONSTANTS (HAN)   =                                       10497000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 31) # ,    10498000          
     C_SOURCE_REMARKS (HAN)     =                                       10499000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 43) # ,    10500000          
     C_SOURCE_LINE (HAN)        =                                       10501000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)], 8) + 77) # ,    10502000          
     C_SOURCE_MEM_LENGTH (HAN)  =                                       10503000          
         INTEGER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                    10504000          
                            + C_SOURCE_MEM_LEN_OFFSET]) # ,             10505000          
     C_SOURCE_MEM_INDEX (HAN)   =                                       10506000          
         INTEGER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                    10507000          
                            + C_SOURCE_MEM_IDX_OFFSET]) # ,             10508000          
     C_SOURCE_MEM_CODE (HAN)    =                                       10509000          
         POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                    10510000          
                            + C_SOURCE_MEM_OBJ_OFFSET], 8) # ,          10511000          
     C_SOURCE_MEM_CODE_OP (HAN) =                                       10512000          
         POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                    10513000          
                            + C_SOURCE_MEM_OBJ_OFFSET], 8) # ,          10514000          
     C_SOURCE_MEM_CODE_M  (HAN) =                                       10515000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10516000          
                            + C_SOURCE_MEM_OBJ_OFFSET], 8) + 1) # ,     10517000          
     C_SOURCE_MEM_CODE_N  (HAN) =                                       10518000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10519000          
                            + C_SOURCE_MEM_OBJ_OFFSET], 8) + 2) # ,     10520000          
     C_SOURCE_MEM_CODE_A  (HAN) =                                       10521000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10522000          
                            + C_SOURCE_MEM_OBJ_OFFSET], 8) + 3) # ,     10523000          
     C_SOURCE_MEM_CODE_B  (HAN) =                                       10524000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10525000          
                            + C_SOURCE_MEM_OBJ_OFFSET], 8) + 6) # ,     10526000          
     C_SOURCE_MEM_CODE_C  (HAN) =                                       10527000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10528000          
                            + C_SOURCE_MEM_OBJ_OFFSET], 8) + 9) # ,     10529000          
     C_SOURCE_ERRORS (HAN)      =                                       10530000          
         POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                    10531000          
                            + C_SOURCE_ERRORS_OFFSET], 8) # ,           10532000          
     C_SOURCE_OP_ERROR (HAN)    =                                       10533000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10534000          
                            + C_SOURCE_ERRORS_OFFSET], 8) + 0) # ,      10535000          
     C_SOURCE_M_ERROR (HAN)     =                                       10536000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10537000          
                            + C_SOURCE_ERRORS_OFFSET], 8) + 1) # ,      10538000          
     C_SOURCE_N_ERROR (HAN)     =                                       10539000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10540000          
                            + C_SOURCE_ERRORS_OFFSET], 8) + 2) # ,      10541000          
     C_SOURCE_A_ERROR (HAN)     =                                       10542000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10543000          
                            + C_SOURCE_ERRORS_OFFSET], 8) + 4) # ,      10544000          
     C_SOURCE_B_ERROR (HAN)     =                                       10545000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10546000          
                            + C_SOURCE_ERRORS_OFFSET], 8) + 5) # ,      10547000          
     C_SOURCE_C_ERROR (HAN)     =                                       10548000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10549000          
                            + C_SOURCE_ERRORS_OFFSET], 8) + 6) # ,      10550000          
     C_SOURCE_REF_ERROR (HAN)   =                                       10551000          
         (POINTER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                   10552000          
                            + C_SOURCE_ERRORS_OFFSET], 8) + 8) # ,      10553000          
     C_SOURCE_CARD_NUMBER (HAN) =                                       10554000          
         INTEGER (C_SOURCE [(HAN * C_SOURCE_REC_LEN)                    10555000          
                            + C_SOURCE_CARD_NUMBER_OFFSET]) # ,         10556000          
%                                                                       10557000          
     C_SOURCE_SET_OP_ERROR (HAN) =                                      10558000          
         BEGIN                                                          10559000          
         REPLACE C_SOURCE_OP_ERROR (HAN) BY "O" ;                       10560000          
         C_ERROR_COUNT := * + 1 ;                                       10561000          
         END # ,                                                        10562000          
     C_SOURCE_SET_M_ERROR (HAN) =                                       10563000          
         BEGIN                                                          10564000          
         REPLACE C_SOURCE_M_ERROR (HAN) BY "M" ;                        10565000          
         C_ERROR_COUNT := * + 1 ;                                       10566000          
         END # ,                                                        10567000          
     C_SOURCE_SET_N_ERROR (HAN) =                                       10568000          
         BEGIN                                                          10569000          
         REPLACE C_SOURCE_N_ERROR (HAN) BY "N" ;                        10570000          
         C_ERROR_COUNT := * + 1 ;                                       10571000          
         END # ,                                                        10572000          
     C_SOURCE_SET_A_ERROR (HAN) =                                       10573000          
         BEGIN                                                          10574000          
         REPLACE C_SOURCE_A_ERROR (HAN) BY "A" ;                        10575000          
         C_ERROR_COUNT := * + 1 ;                                       10576000          
         END # ,                                                        10577000          
     C_SOURCE_SET_B_ERROR (HAN) =                                       10578000          
         BEGIN                                                          10579000          
         REPLACE C_SOURCE_B_ERROR (HAN) BY "B" ;                        10580000          
         C_ERROR_COUNT := * + 1 ;                                       10581000          
         END # ,                                                        10582000          
     C_SOURCE_SET_C_ERROR (HAN) =                                       10583000          
         BEGIN                                                          10584000          
         REPLACE C_SOURCE_C_ERROR (HAN) BY "C" ;                        10585000          
         C_ERROR_COUNT := * + 1 ;                                       10586000          
         END # ,                                                        10587000          
     C_SOURCE_SET_REF_ERROR (HAN) =                                     10588000          
         BEGIN                                                          10589000          
         REPLACE C_SOURCE_REF_ERROR (HAN) BY "R" ;                      10590000          
         C_ERROR_COUNT := * + 1 ;                                       10591000          
         END # ,                                                        10592000          
     C_SOURCE_SET_OP_UNHANDLED_ERROR (HAN) =                            10593000          
         BEGIN                                                          10594000          
         REPLACE C_SOURCE_OP_ERROR (HAN) BY "U" ;                       10595000          
         C_ERROR_COUNT := * + 1 ;                                       10596000          
         END # ,                                                        10597000          
     C_SOURCE_INITIALIZE (SRC_PTR, HAN) =                               10598000          
         BEGIN                                                          10599000          
         HAN := C_SOURCE_HANDLE ;                                       10600000          
         C_SOURCE_HANDLE := * + C_SOURCE_REC_LEN ;                      10601000          
         REPLACE C_SOURCE_IDENT (HAN) BY                                10602000          
             SRC_PTR FOR 80 ;                                           10603000          
         C_SOURCE_MEM_LENGTH (HAN) := 0 ;                               10604000          
         C_SOURCE_MEM_INDEX (HAN) := 0 ;                                10605000          
         REPLACE C_SOURCE_MEM_CODE (HAN) BY                             10606000          
             B_110000 FOR 12 ;                  % Spaces                10607000          
         REPLACE C_SOURCE_ERRORS (HAN) BY                               10608000          
             " " FOR C_SOURCE_ERRORS_LENGTH ;                           10609000          
          C_SOURCE_CARD_NUMBER (HAN) := C_CARD_COUNT ;                  10610000          
         END # ,                                                        10611000          
     BUMP_C_MEMORY_INDEX (NUM)  =                                       10612000          
         BEGIN                                                          10613000          
         C_MEMORY_INDEX := * + (NUM) ;                                  10614000          
         IF C_MEMORY_INDEX_MAX < C_MEMORY_INDEX THEN                    10615000          
             BEGIN                                                      10616000          
             C_MEMORY_INDEX_MAX := C_MEMORY_INDEX ;                     10617000          
             END ;                                                      10618000          
         END # ,                                                        10619000          
     SET_C_MEMORY_INDEX (NUM)   =                                       10620000          
         BUMP_C_MEMORY_INDEX (NUM - C_MEMORY_INDEX) # ,                 10621000          
     M_VAR                      = 1"0000001" # ,                        10622000          
     N_VAR                      = 1"0000010" # ,                        10623000          
     A_ADD                      = 1"0000100" # ,                        10624000          
     B_ADD                      = 1"0001000" # ,                        10625000          
     C_ADD                      = 1"0010000" # ,                        10626000          
     ALL_VAR                    =                                       10627000          
         (M_VAR + N_VAR) # ,                                            10628000          
     ALL_ADD                    =                                       10629000          
         (A_ADD + B_ADD + C_ADD) # ,                                    10630000          
     ALL_VAR_ADD                =                                       10631000          
         (M_VAR + N_VAR + A_ADD + B_ADD + C_ADD) # ,                    10632000          
     INCLUDE_M_VAR (FL)         = BOOLEAN (FL.[0:1]) # ,                10633000          
     INCLUDE_N_VAR (FL)         = BOOLEAN (FL.[1:1]) # ,                10634000          
     INCLUDE_A_ADD (FL)         = BOOLEAN (FL.[2:1]) # ,                10635000          
     INCLUDE_B_ADD (FL)         = BOOLEAN (FL.[3:1]) # ,                10636000          
     INCLUDE_C_ADD (FL)         = BOOLEAN (FL.[4:1]) # ,                10637000          
     REFERENCE_NODE_SIZE        = 4 # ,                                 10638000          
     REFERENCE_NODE_HANDLE (NOD) =                                      10639000          
         REFERENCE_INDEX [NOD * REFERENCE_NODE_SIZE] # ,                10640000          
     REFERENCE_NODE_LOW (NOD)   =                                       10641000          
         REFERENCE_INDEX [(NOD * REFERENCE_NODE_SIZE) + 1] # ,          10642000          
     REFERENCE_NODE_HIGH (NOD)  =                                       10643000          
         REFERENCE_INDEX [(NOD * REFERENCE_NODE_SIZE) + 2] # ,          10644000          
     REFERENCE_NODE_COUNT (NOD) =                                       10645000          
         REFERENCE_INDEX [(NOD * REFERENCE_NODE_SIZE) + 3] #            10646000          
     ;                                                                  10647000          
 REAL ARRAY                                                             10648000          
     C_SOURCE [0:5000000]                                               10649000          
     ;                                                                  10650000          
 EBCDIC ARRAY                                                           10651000          
     VARIANT_WORK [0:1] ,                                               10652000          
     ADDRESS_WORK [0:3] ,                                               10653000          
     SIZE_WORK [0:2] ,                                                  10654000          
     LINK_SOURCE_1 [0:79] ,                                             10655000          
     LINK_SOURCE_2 [0:79]                                               10656000          
     ;                                                                  10657000          
 INTEGER                                                                10658000          
     REFERENCE_HANDLE_NEXT ,                                            10659000          
     REFERENCE_INDEX_ROOT                                               10660000          
     ;                                                                  10661000          
 INTEGER ARRAY                                                          10662000          
     REFERENCE_HANDLES [0:2000] ,                                       10663000          
     REFERENCE_INDEX [0:1000]                                           10664000          
     ;                                                                  10665000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%10666000          
%                                                                       10667000          
 FILE                                                                   10668000          
     REM                                % For TESTING                   10669000          
         (                                                              10670000          
         KIND               = REMOTE  ,                                 10671000          
         MINRECSIZE         = 1 ,                                       10672000          
         UNITS              = CHARACTERS ,                              10673000          
         MYUSE              = IO ,                                      10674000          
         BLOCKSTRUCTURE     = EXTERNAL ,                                10675000          
         MAXRECSIZE         = 2000                                      10676000          
         ) ,                                                            10677000          
     CARD                                                               10678000          
         (                                                              10679000          
         KIND           = READER ,                                      10680000          
         MYUSE          = IN ,                                          10681000          
         DEPENDENTSPECS = TRUE                                          10682000          
         ) ,                                                            10683000          
     PRINTOUT                                                           10684000          
         (                                                              10685000          
         KIND           = PRINTER ,                                     10686000          
         MYUSE          = OUT ,                                         10687000          
         FRAMESIZE      = 8                                             10688000          
         ) ,                                                            10689000          
     OBJECT                                                             10690000          
         (                                                              10691000          
         KIND           = DISK ,                                        10692000          
         MYUSE          = OUT ,                                         10693000          
         FRAMESIZE      = 8 ,                                           10694000          
         MAXRECSIZE     = 80 ,                                          10695000          
         BLOCKSIZE      = 800                                           10696000          
         )                                                              10697000          
     ;                                                                  10698000          
 EBCDIC ARRAY                                                           10699000          
     SOURCE_RECORD [0:79] ,                                             10700000          
     PRINT_RECORD [0:131] ,                                             10701000          
     PRINT_HEADING_1 [0:131] ,                                          10702000          
     PRINT_HEADING_2 [0:131] ,                                          10703000          
     OBJECT_RECORD [0:79]                                               10704000          
     ;                                                                  10705000          
 INTEGER                                                                10706000          
     PAGE_NUMBER                                                        10707000          
     ;                                                                  10708000          
 DEFINE                                                                 10709000          
     PRINT_ERRORS_OFFSET        = 0 # ,                                 10710000          
     PRINT_MEM_ADDR_OFFSET      = 13 # ,                                10711000          
     PRINT_MEM_FIELD_OFFSET     = 17 # ,                                10712000          
     PRINT_OP_CODE_OFFSET       = 31 # ,                                10713000          
     PRINT_M_VAR_OFFSET         = 36 # ,                                10714000          
     PRINT_N_VAR_OFFSET         = 39 # ,                                10715000          
     PRINT_A_ADDR_OFFSET        = 42 # ,                                10716000          
     PRINT_B_ADDR_OFFSET        = 47 # ,                                10717000          
     PRINT_C_ADDR_OFFSET        = 52 # ,                                10718000          
     PRINT_PAGE_OFFSET          = 57 # ,                                10719000          
     PRINT_REF_OFFSET           = 59 # ,                                10720000          
     PRINT_SIZE_OFFSET          = 61 # ,                                10721000          
     PRINT_CONST_OFFSET         = 65 # ,                                10722000          
     PRINT_REMARKS_OFFSET       = 79 # ,                                10723000          
     PRINT_CARD_NUMBER_OFFSET   = 120 # ,                               10724000          
     PAGE_NUMBER_OFFSET         = 128 #                                 10725000          
     ;                                                                  10726000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%10727000          
%                                                                       10728000          
%-----------------------------------------------------------------------10729000          
% B_CHANGE_BIT - Change the B,A,8,4,2,1 bit                             10730000          
% Inputs:                                                               10731000          
%   B_CHAR_PTR - Pointer to B300 memory character                       10732000          
%   BIT_ID - B,A,8,4,2,1 bit identifier                                 10733000          
%     See DEFINEs below for setting/resetting bits                      10734000          
%   BIT_VALUE - 0 or 1                                                  10735000          
% Outputs:                                                              10736000          
%   B_CHAR_PTR - Updated bit setting                                    10737000          
%-----------------------------------------------------------------------10738000          
 DEFINE                                                                 10739000          
     B_SET_B_BIT (PTR)  = B_CHANGE_BIT (PTR, 5, 1) # ,                  10740000          
     B_SET_A_BIT (PTR)  = B_CHANGE_BIT (PTR, 4, 1) # ,                  10741000          
     B_SET_8_BIT (PTR)  = B_CHANGE_BIT (PTR, 3, 1) # ,                  10742000          
     B_SET_4_BIT (PTR)  = B_CHANGE_BIT (PTR, 2, 1) # ,                  10743000          
     B_SET_2_BIT (PTR)  = B_CHANGE_BIT (PTR, 1, 1) # ,                  10744000          
     B_SET_1_BIT (PTR)  = B_CHANGE_BIT (PTR, 0, 1) # ,                  10745000          
     B_RESET_B_BIT (PTR)  = B_CHANGE_BIT (PTR, 5, 0) # ,                10746000          
     B_RESET_A_BIT (PTR)  = B_CHANGE_BIT (PTR, 4, 0) # ,                10747000          
     B_RESET_8_BIT (PTR)  = B_CHANGE_BIT (PTR, 3, 0) # ,                10748000          
     B_RESET_4_BIT (PTR)  = B_CHANGE_BIT (PTR, 2, 0) # ,                10749000          
     B_RESET_2_BIT (PTR)  = B_CHANGE_BIT (PTR, 1, 0) # ,                10750000          
     B_RESET_1_BIT (PTR)  = B_CHANGE_BIT (PTR, 0, 0) # ,                10751000          
     B_TEST_B_BIT (PTR) = BOOLEAN (REAL (PTR, 1).[5:1]) # ,             10752000          
     B_TEST_A_BIT (PTR) = BOOLEAN (REAL (PTR, 1).[4:1]) # ,             10753000          
     B_TEST_8_BIT (PTR) = BOOLEAN (REAL (PTR, 1).[3:1]) # ,             10754000          
     B_TEST_4_BIT (PTR) = BOOLEAN (REAL (PTR, 1).[2:1]) # ,             10755000          
     B_TEST_2_BIT (PTR) = BOOLEAN (REAL (PTR, 1).[1:1]) # ,             10756000          
     B_TEST_1_BIT (PTR) = BOOLEAN (REAL (PTR, 1).[0:1]) #               10757000          
     ;                                                                  10758000          
%------------------------------                                         10759000          
 INTEGER PROCEDURE B_CHANGE_BIT                                         10760000          
     (                                                                  10761000          
     B_CHAR_PTR ,                       % Memory character              10762000          
     BIT_ID ,                           % B,A,8,4,2,1 identifier        10763000          
     BIT_VALUE                          % New bit value (0,1)           10764000          
     ) ;                                                                10765000          
 VALUE                                                                  10766000          
     B_CHAR_PTR ,                                                       10767000          
     BIT_ID ,                                                           10768000          
     BIT_VALUE                                                          10769000          
     ;                                                                  10770000          
 POINTER                                                                10771000          
     B_CHAR_PTR                                                         10772000          
    ;                                                                   10773000          
 INTEGER                                                                10774000          
     BIT_ID ,                                                           10775000          
     BIT_VALUE                                                          10776000          
     ;                                                                  10777000          
 BEGIN                                                                  10778000          
%                                                                       10779000          
 INTEGER                                                                10780000          
     B_WORK                                                             10781000          
     ;                                                                  10782000          
 B_WORK := REAL (B_CHAR_PTR, 1).[7:8] ; % Char to integer               10783000          
 B_WORK.[BIT_ID:1] := BIT_VALUE ;       % Set bit value                 10784000          
 REPLACE B_CHAR_PTR BY                  % Update mem character          10785000          
     B_WORK.[7:48] FOR 1 ;                                              10786000          
%                                                                       10787000          
 END B_CHANGE_BIT ;                                                     10788000          
%                                                                       10789000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%10790000          
%                                                                       10791000          
%-----------------------------------------------------------------------10792000          
% C_INDEX_TO_B_ADDRESS - Translate integer location to B300 mem address 10793000          
%-----------------------------------------------------------------------10794000          
 INTEGER PROCEDURE C_INDEX_TO_B_ADDRESS                                 10795000          
     (                                                                  10796000          
     C_IDX ,                    % Memory index                          10797000          
     B_ADDR_PTR                 % Output 3 char memory location         10798000          
     ) ;                                                                10799000          
 VALUE                                                                  10800000          
     C_IDX ,                                                            10801000          
     B_ADDR_PTR                                                         10802000          
     ;                                                                  10803000          
 INTEGER                                                                10804000          
     C_IDX                                                              10805000          
     ;                                                                  10806000          
 POINTER                                                                10807000          
     B_ADDR_PTR                                                         10808000          
     ;                                                                  10809000          
 BEGIN                                                                  10810000          
%                                                                       10811000          
 INTEGER                                                                10812000          
     IDX_WORK ,                                                         10813000          
     B_SECTION_OFFSET ,                                                 10814000          
     B_FIELD_OFFSET ,                                                   10815000          
     B_CHAR_OFFSET                                                      10816000          
     ;                                                                  10817000          
 B_SECTION_OFFSET := (C_IDX MOD 4800) DIV 120 ; % indexs to mem chars   10818000          
 B_FIELD_OFFSET := (C_IDX MOD 120) DIV 12 ;                             10819000          
 B_CHAR_OFFSET := C_IDX MOD 12 ;                                        10820000          
%----                                                                   10821000          
%---- Build 3 character memory location (4.8K)                          10822000          
%----                                                                   10823000          
 REPLACE B_ADDR_PTR BY                                                  10824000          
     B_ADDRESS_SECTIONS [B_SECTION_OFFSET] FOR 1 ,                      10825000          
     B_ADDRESS_FIELDS [B_FIELD_OFFSET] FOR 1 ,                          10826000          
     B_ADDRESS_CHARS [B_CHAR_OFFSET] FOR 1 ;                            10827000          
%----                                                                   10828000          
%---- Set B bit for memory > 9.6K                                       10829000          
%----                                                                   10830000          
 IF C_IDX >= 9600 THEN                                                  10831000          
     BEGIN              % This may not be correct??????                 10832000          
     B_SET_A_BIT (B_ADDR_PTR + 1) ;     % Address field                 10833000          
     END ;                                                              10834000          
%----                                                                   10835000          
%---- Set A bit for memory > 4.8K                                       10836000          
%----                                                                   10837000          
 IF C_IDX >= 4800 THEN                                                  10838000          
     BEGIN                                                              10839000          
     IF C_IDX MOD 9600 >= 4800 THEN                                     10840000          
         BEGIN                                                          10841000          
         B_SET_B_BIT (B_ADDR_PTR + 1) ; % Address field                 10842000          
         END ;                                                          10843000          
     END ;                                                              10844000          
%                                                                       10845000          
 END C_INDEX_TO_B_ADDRESS ;                                             10846000          
%                                                                       10847000          
%-----------------------------------------------------------------------10848000          
% B_ADDRESS_TO_C_INDEX                                                  10849000          
%-----------------------------------------------------------------------10850000          
 INTEGER PROCEDURE B_ADDRESS_TO_C_INDEX                                 10851000          
     (                                                                  10852000          
     B_ADDRESS_PTR              % B300 Address                          10853000          
     ) ;                                                                10854000          
 VALUE                                                                  10855000          
     B_ADDRESS_PTR                                                      10856000          
     ;                                                                  10857000          
 POINTER                                                                10858000          
     B_ADDRESS_PTR                                                      10859000          
     ;                                                                  10860000          
 BEGIN                                                                  10861000          
%                                                                       10862000          
 INTEGER                                                                10863000          
     C_IDX ,                                                            10864000          
     B_BIT_WORK                                                         10865000          
     ;                                                                  10866000          
 LABEL                                                                  10867000          
     B_ADDRESS_TO_C_INDEX_EXIT                                          10868000          
     ;                                                                  10869000          
 B_ADDRESS_TO_C_INDEX := (-1) ;                                         10870000          
 C_IDX := 0 ;                                                           10871000          
%                                                                       10872000          
 B_BIT_WORK := REAL (B_ADDRESS_PTR, 1) ;                                10873000          
 IF B_BIT_WORK.[3:4] > 9 THEN                                           10874000          
     BEGIN                                                              10875000          
     GO TO B_ADDRESS_TO_C_INDEX_EXIT ;                                  10876000          
     END ;                                                              10877000          
 C_IDX := * + (B_BIT_WORK.[5:2] * 1200) ;                               10878000          
 C_IDX := * + (B_BIT_WORK.[3:4] * 120) ;                                10879000          
%                                                                       10880000          
 B_BIT_WORK := REAL (B_ADDRESS_PTR + 1, 1) ;                            10881000          
 IF B_BIT_WORK.[3:4] > 9 THEN                                           10882000          
     BEGIN                              % Only 0-9                      10883000          
     GO TO B_ADDRESS_TO_C_INDEX_EXIT ;                                  10884000          
     END ;                                                              10885000          
 IF BOOLEAN (B_BIT_WORK.[5:1]) THEN                                     10886000          
     BEGIN                                                              10887000          
     C_IDX := * + 4800 ;                                                10888000          
     END ;                                                              10889000          
 IF BOOLEAN (B_BIT_WORK.[4:1]) THEN                                     10890000          
     BEGIN                                                              10891000          
     C_IDX := * + 9600 ;                                                10892000          
     END ;                                                              10893000          
 C_IDX := * + (B_BIT_WORK.[3:4] * 12) ;                                 10894000          
%                                                                       10895000          
 B_BIT_WORK := REAL (B_ADDRESS_PTR + 2, 1) ;                            10896000          
 IF B_BIT_WORK.[3:4] > 11 THEN                                          10897000          
     BEGIN                              % Only 0-9,#,@                  10898000          
     GO TO B_ADDRESS_TO_C_INDEX_EXIT ;                                  10899000          
     END ;                                                              10900000          
 C_IDX := * + B_BIT_WORK.[3:4] ;                                        10901000          
%                                                                       10902000          
 IF C_IDX >= B_MEMORY_SIZE THEN                                         10903000          
     BEGIN                              % Exceeded memory size          10904000          
     GO TO B_ADDRESS_TO_C_INDEX_EXIT ;                                  10905000          
     END ;                                                              10906000          
%                                                                       10907000          
 B_ADDRESS_TO_C_INDEX := C_IDX ;                                        10908000          
%                                                                       10909000          
 B_ADDRESS_TO_C_INDEX_EXIT:                                             10910000          
%                                                                       10911000          
 END B_ADDRESS_TO_C_INDEX ;                                             10912000          
%                                                                       10913000          
%-----------------------------------------------------------------------10914000          
% ALLOCATE_C_MEMORY - Allocate memory, bump memory index                10915000          
%-----------------------------------------------------------------------10916000          
 INTEGER PROCEDURE ALLOCATE_C_MEMORY                                    10917000          
     (                                                                  10918000          
     HANDLE ,                   % Source entry                          10919000          
     CHAR_COUNT                 % Characters to allocate                10920000          
     ) ;                                                                10921000          
 VALUE                                                                  10922000          
     HANDLE ,                                                           10923000          
     CHAR_COUNT                                                         10924000          
     ;                                                                  10925000          
 INTEGER                                                                10926000          
     HANDLE ,                                                           10927000          
     CHAR_COUNT                                                         10928000          
     ;                                                                  10929000          
 BEGIN                                                                  10930000          
%                                                                       10931000          
 ALLOCATE_C_MEMORY := C_MEMORY_INDEX ;  % Return idx to alloc mem       10932000          
%                                                                       10933000          
 C_SOURCE_MEM_LENGTH (HANDLE) := CHAR_COUNT ;   % Set mem vars          10934000          
 C_SOURCE_MEM_INDEX (HANDLE) := C_MEMORY_INDEX ;                        10935000          
 REPLACE C_SOURCE_MEM_CODE (HANDLE) BY          % Initialize to spaces  10936000          
     B_SPACE FOR 12 ;                                                   10937000          
%                                                                       10938000          
 BUMP_C_MEMORY_INDEX (CHAR_COUNT) ;     % Next available mem index      10939000          
%                                                                       10940000          
 END ALLOCATE_C_MEMORY ;                                                10941000          
%                                                                       10942000          
%-----------------------------------------------------------------------10943000          
% ALLOCATE_C_INSTRUCTION - Allocation 12 character b300 instruction     10944000          
%-----------------------------------------------------------------------10945000          
 INTEGER PROCEDURE ALLOCATE_C_INSTRUCTION                               10946000          
     (                                                                  10947000          
     HANDLE                     % Source handle                         10948000          
     ) ;                                                                10949000          
 VALUE                                                                  10950000          
     HANDLE                                                             10951000          
     ;                                                                  10952000          
 INTEGER                                                                10953000          
     HANDLE                                                             10954000          
     ;                                                                  10955000          
 BEGIN                                                                  10956000          
%                                                                       10957000          
 INTEGER                                                                10958000          
     OP_OFFSET                                                          10959000          
     ;                                                                  10960000          
 IF (OP_OFFSET := C_MEMORY_INDEX MOD 12) > 0 THEN                       10961000          
     BEGIN                              % Has to be mod 12              10962000          
     BUMP_C_MEMORY_INDEX (12 - OP_OFFSET) ;                             10963000          
     END ;                                                              10964000          
%                                                                       10965000          
 ALLOCATE_C_INSTRUCTION := ALLOCATE_C_MEMORY (HANDLE, 12) ;             10966000          
%                                                                       10967000          
 END ALLOCATE_C_INSTRUCTION ;                                           10968000          
%                                                                       10969000          
%-----------------------------------------------------------------------10970000          
% PROCESS_SLA_OP - Set location address                                 10971000          
%-----------------------------------------------------------------------10972000          
 INTEGER PROCEDURE PROCESS_SLA_OP                                       10973000          
     (                                                                  10974000          
     HANDLE                                                             10975000          
     ) ;                                                                10976000          
 VALUE                                                                  10977000          
     HANDLE                                                             10978000          
     ;                                                                  10979000          
 INTEGER                                                                10980000          
     HANDLE                                                             10981000          
     ;                                                                  10982000          
 BEGIN                                                                  10983000          
%                                                                       10984000          
 INTEGER                                                                10985000          
     C_IDX                                                              10986000          
     ;                                                                  10987000          
 REPLACE ADDRESS_WORK BY                                                10988000          
     C_SOURCE_A_ADDRESS (HANDLE) FOR 4                                  10989000          
         WITH C_TO_B ;                                                  10990000          
 C_IDX := B_ADDRESS_TO_C_INDEX (ADDRESS_WORK[1]) ;                      10991000          
%                                                                       10992000          
 IF C_IDX >= 0 THEN                                                     10993000          
     BEGIN                                                              10994000          
     SET_C_MEMORY_INDEX (C_IDX) ;                                       10995000          
     C_SOURCE_MEM_INDEX (HANDLE) := C_IDX ;                             10996000          
     END                                                                10997000          
 ELSE                                                                   10998000          
     BEGIN                                                              10999000          
     C_SOURCE_SET_A_ERROR (HANDLE) ;                                    11000000          
     END ;                                                              11001000          
%                                                                       11002000          
 PROCESS_SLA_OP := C_IDX ;                                              11003000          
%                                                                       11004000          
 END PROCESS_SLA_OP ;                                                   11005000          
%                                                                       11006000          
%-----------------------------------------------------------------------11007000          
% PROCESS_SLI_OP - Set location index                                   11008000          
%-----------------------------------------------------------------------11009000          
 INTEGER PROCEDURE PROCESS_SLI_OP                                       11010000          
     (                                                                  11011000          
     HANDLE                                                             11012000          
     ) ;                                                                11013000          
 VALUE                                                                  11014000          
     HANDLE                                                             11015000          
     ;                                                                  11016000          
 INTEGER                                                                11017000          
     HANDLE                                                             11018000          
     ;                                                                  11019000          
 BEGIN                                                                  11020000          
%                                                                       11021000          
 INTEGER                                                                11022000          
     C_IDX ,                                                            11023000          
     INDEX_LEFT                                                         11024000          
     ;                                                                  11025000          
 POINTER                                                                11026000          
     INDEX_PTR ,                                                        11027000          
     INDEX_END_PTR                                                      11028000          
     ;                                                                  11029000          
 SCAN INDEX_PTR:C_SOURCE_CONSTANTS (HANDLE)                             11030000          
     FOR INDEX_LEFT:12                                                  11031000          
         UNTIL IN "0123456789" ;                                        11032000          
 SCAN INDEX_END_PTR:INDEX_PTR                                           11033000          
     FOR INDEX_LEFT                                                     11034000          
         WHILE IN "0123456789" ;                                        11035000          
 C_IDX := DELTA (INDEX_PTR, INDEX_END_PTR) ;                            11036000          
%                                                                       11037000          
 IF C_IDX > 0 THEN                                                      11038000          
     BEGIN                                                              11039000          
     C_IDX := DECIMAL (STRING (INDEX_PTR, C_IDX)) ;                     11040000          
     SET_C_MEMORY_INDEX (C_IDX) ;                                       11041000          
     END                                                                11042000          
 ELSE                                                                   11043000          
     BEGIN                                                              11044000          
     C_IDX := (-1) ;                                                    11045000          
     END ;                                                              11046000          
%                                                                       11047000          
 IF C_IDX < 0 THEN                                                      11048000          
     BEGIN                                                              11049000          
     C_SOURCE_SET_A_ERROR (HANDLE) ;                                    11050000          
     END ;                                                              11051000          
%                                                                       11052000          
 C_SOURCE_MEM_INDEX (HANDLE) := C_IDX ;                                 11053000          
 PROCESS_SLI_OP := C_IDX ;                                              11054000          
%                                                                       11055000          
 END PROCESS_SLI_OP ;                                                   11056000          
%                                                                       11057000          
%-----------------------------------------------------------------------11058000          
% PROCESS_ALC_OP - Adjust location address                              11059000          
%-----------------------------------------------------------------------11060000          
 INTEGER PROCEDURE PROCESS_ALC_OP                                       11061000          
     (                                                                  11062000          
     HANDLE                                                             11063000          
     ) ;                                                                11064000          
 VALUE                                                                  11065000          
     HANDLE                                                             11066000          
     ;                                                                  11067000          
 INTEGER                                                                11068000          
     HANDLE                                                             11069000          
     ;                                                                  11070000          
 BEGIN                                                                  11071000          
%                                                                       11072000          
 INTEGER                                                                11073000          
     C_IDX                                                              11074000          
     ;                                                                  11075000          
 C_IDX := C_MEMORY_INDEX ;                                              11076000          
% DONT KNOW WHAT TO DO HERE                                             11077000          
%                                                                       11078000          
 C_SOURCE_MEM_INDEX (HANDLE) := C_IDX ;                                 11079000          
 PROCESS_ALC_OP := C_IDX ;                                              11080000          
%                                                                       11081000          
 END PROCESS_ALC_OP ;                                                   11082000          
%                                                                       11083000          
%-----------------------------------------------------------------------11084000          
% PROCESS_REFERENCE - Save source handle if ref char not = space        11085000          
%-----------------------------------------------------------------------11086000          
 INTEGER PROCEDURE PROCESS_REFERENCE                                    11087000          
     (                                                                  11088000          
     HANDLE                                                             11089000          
     ) ;                                                                11090000          
 VALUE                                                                  11091000          
     HANDLE                                                             11092000          
     ;                                                                  11093000          
 INTEGER                                                                11094000          
     HANDLE                                                             11095000          
     ;                                                                  11096000          
 BEGIN                                                                  11097000          
%                                                                       11098000          
 IF C_SOURCE_REFERENCE (HANDLE) ^= " " THEN                             11099000          
     BEGIN                              % Save it                       11100000          
     REFERENCE_HANDLES [REFERENCE_HANDLE_NEXT] := HANDLE ;              11101000          
     REFERENCE_HANDLE_NEXT := * + 1 ;                                   11102000          
     END ;                                                              11103000          
%                                                                       11104000          
 END PROCESS_REFERENCE ;                                                11105000          
%                                                                       11106000          
%-----------------------------------------------------------------------11107000          
% PROCESS_CONSTANT - Allocate/initialize b300 memory for constant       11108000          
%-----------------------------------------------------------------------11109000          
 INTEGER PROCEDURE PROCESS_CONSTANT                                     11110000          
     (                                                                  11111000          
     HANDLE                                                             11112000          
     ) ;                                                                11113000          
 VALUE                                                                  11114000          
     HANDLE                                                             11115000          
     ;                                                                  11116000          
 INTEGER                                                                11117000          
     HANDLE                                                             11118000          
     ;                                                                  11119000          
 BEGIN                                                                  11120000          
%                                                                       11121000          
 INTEGER                                                                11122000          
     CONST_LENGTH                                                       11123000          
     ;                                                                  11124000          
 REPLACE SIZE_WORK BY                                                   11125000          
     C_SOURCE_SIZE (HANDLE) FOR 3                                       11126000          
         WITH SPACE_TO_ZERO ;                                           11127000          
%                                                                       11128000          
 CONST_LENGTH := DECIMAL (STRING (SIZE_WORK, 3)) ;                      11129000          
 IF CONST_LENGTH > 0 THEN                                               11130000          
     BEGIN                                                              11131000          
     ALLOCATE_C_MEMORY (HANDLE, CONST_LENGTH) ; % Allocate              11132000          
     REPLACE C_SOURCE_MEM_CODE (HANDLE) BY      % Initialize            11133000          
         C_SOURCE_CONSTANTS (HANDLE)                                    11134000          
             FOR MIN (CONST_LENGTH, 12)                                 11135000          
             WITH C_TO_B ;                                              11136000          
     PROCESS_REFERENCE (HANDLE) ;               % May have reference    11137000          
     END ;                                                              11138000          
%                                                                       11139000          
 END PROCESS_CONSTANT ;                                                 11140000          
%                                                                       11141000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%11142000          
%                                                                       11143000          
%-----------------------------------------------------------------------11144000          
% FIRST_PASS                                                            11145000          
%   o Reads Burroughs Basic Assembler source into C_SOURCE              11146000          
%   o Allocate instruction or constant memory                           11147000          
%     Instruction OP codes are validated in SECOND_PASS                 11148000          
%   o Add entries with reference to REFERENCE_HANDLES                   11149000          
%-----------------------------------------------------------------------11150000          
 INTEGER PROCEDURE FIRST_PASS ;                                         11151000          
 BEGIN                                                                  11152000          
%                                                                       11153000          
 INTEGER                                                                11154000          
     HANDLE                             % Source table handle           11155000          
     ;                                                                  11156000          
 STRING                                                                 11157000          
     OP_CODE                                                            11158000          
     ;                                                                  11159000          
 POINTER                                                                11160000          
     REF_PTR                                                            11161000          
     ;                                                                  11162000          
 LABEL                                                                  11163000          
     NEXT_SOURCE_RECORD ,                                               11164000          
     FIRST_PASS_DONE                                                    11165000          
     ;                                                                  11166000          
 REPLACE SOURCE_RECORD BY                                               11167000          
     " " FOR SIZE (SOURCE_RECORD) ;                                     11168000          
%                                                                       11169000          
 WHILE ^ READ (CARD, SIZE (SOURCE_RECORD), SOURCE_RECORD) DO            11170000          
     BEGIN                                                              11171000          
     C_CARD_COUNT := * + 1 ;                                            11172000          
     C_SOURCE_INITIALIZE (SOURCE_RECORD, HANDLE) ; % SRC to table       11173000          
     OP_CODE := STRING (C_SOURCE_OP_CODE (HANDLE), 3) ;                 11174000          
     IF OP_CODE = "   " THEN                                            11175000          
         BEGIN                          % May be CONSTANT               11176000          
         PROCESS_CONSTANT (HANDLE) ;                                    11177000          
         END                                                            11178000          
     ELSE IF OP_CODE = "HDG" THEN                                       11179000          
         BEGIN                          % Comment                       11180000          
         % Comment - Do nothing                                         11181000          
         END                                                            11182000          
     ELSE IF OP_CODE = "LNK" THEN                                       11183000          
         BEGIN                          % LINK TO SUB                   11184000          
         REF_PTR := C_SOURCE_A_ADDRESS (HANDLE) ;                       11185000          
%DISPLAY (STRING(REF_PTR,3)) ;                                          11186000          
         C_SOURCE_INITIALIZE (LINK_SOURCE_1, HANDLE) ;                  11187000          
         ALLOCATE_C_INSTRUCTION (HANDLE) ;                              11188000          
         REPLACE C_SOURCE_C_ADDRESS (HANDLE) BY                         11189000          
            REF_PTR FOR 3 ,                                             11190000          
            "A" ;                                                       11191000          
         C_SOURCE_INITIALIZE (LINK_SOURCE_2, HANDLE) ;                  11192000          
         ALLOCATE_C_INSTRUCTION (HANDLE) ;                              11193000          
         REPLACE C_SOURCE_A_ADDRESS (HANDLE) BY                         11194000          
            REF_PTR FOR 3 ,                                             11195000          
            "J" ;                                                       11196000          
         END                                                            11197000          
     ELSE IF OP_CODE = "ALC" THEN                                       11198000          
         BEGIN                          % ADJUST LOCATION               11199000          
         PROCESS_ALC_OP (HANDLE) ;                                      11200000          
         END                                                            11201000          
     ELSE IF OP_CODE = "SLA" THEN                                       11202000          
         BEGIN                          % SET LOCATION ADDRESS          11203000          
         PROCESS_SLA_OP (HANDLE) ;                                      11204000          
         END                                                            11205000          
     ELSE IF OP_CODE = "SLI" THEN                                       11206000          
         BEGIN                          % SET LOCATION INDEX            11207000          
         PROCESS_SLI_OP (HANDLE) ;                                      11208000          
         END                                                            11209000          
     ELSE IF OP_CODE = "END" THEN                                       11210000          
         BEGIN                          % END - exit                    11211000          
         GO TO FIRST_PASS_DONE ;                                        11212000          
         END                                                            11213000          
     ELSE                                                               11214000          
         BEGIN                          % Assume Op code entry          11215000          
         ALLOCATE_C_INSTRUCTION (HANDLE) ;                              11216000          
         PROCESS_REFERENCE (HANDLE) ;                                   11217000          
         END ;                                                          11218000          
     NEXT_SOURCE_RECORD:                                                11219000          
     END ;                                                              11220000          
%                                                                       11221000          
 CLOSE (CARD, LOCK) ;                                                   11222000          
%                                                                       11223000          
 FIRST_PASS_DONE:                                                       11224000          
%                                                                       11225000          
 END FIRST_PASS ;                                                       11226000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%11227000          
%                                                                       11228000          
%-----------------------------------------------------------------------11229000          
% BUILD_VARIANT                                                         11230000          
%-----------------------------------------------------------------------11231000          
 INTEGER PROCEDURE BUILD_VARIANT                                        11232000          
     (                                                                  11233000          
     C_VAR_SOURCE ,                                                     11234000          
     B_VAR_DEST                                                         11235000          
     ) ;                                                                11236000          
 VALUE                                                                  11237000          
     C_VAR_SOURCE ,                                                     11238000          
     B_VAR_DEST                                                         11239000          
     ;                                                                  11240000          
 POINTER                                                                11241000          
     C_VAR_SOURCE ,                                                     11242000          
     B_VAR_DEST                                                         11243000          
     ;                                                                  11244000          
 BEGIN                                                                  11245000          
%                                                                       11246000          
 INTEGER                                                                11247000          
     VAR_VALUE                                                          11248000          
     ;                                                                  11249000          
 POINTER                                                                11250000          
     VAR_PTR                                                            11251000          
     ;                                                                  11252000          
 LABEL                                                                  11253000          
     BUILD_VARIANT_EXIT                                                 11254000          
     ;                                                                  11255000          
 BUILD_VARIANT := 0 ;                                                   11256000          
%                                                                       11257000          
 IF C_VAR_SOURCE = " " FOR 2 THEN                                       11258000          
     BEGIN                                                              11259000          
     % DEFAULT ????                                                     11260000          
     GO TO BUILD_VARIANT_EXIT ;                                         11261000          
     END ;                                                              11262000          
%                                                                       11263000          
 REPLACE VARIANT_WORK BY                                                11264000          
     C_VAR_SOURCE FOR 2                                                 11265000          
         WITH SPACE_TO_ZERO ;                                           11266000          
%                                                                       11267000          
 SCAN VAR_PTR:VARIANT_WORK                                              11268000          
     FOR VAR_VALUE:2                                                    11269000          
         WHILE IN "0123456789" ;                                        11270000          
 IF VAR_VALUE > 0 THEN                                                  11271000          
     BEGIN                                                              11272000          
     % ERROR   ????                                                     11273000          
     GO TO BUILD_VARIANT_EXIT ;                                         11274000          
     END ;                                                              11275000          
%                                                                       11276000          
 VAR_VALUE := DECIMAL (STRING (VARIANT_WORK, 2)) ;                      11277000          
 IF VAR_VALUE > 12 THEN                                                 11278000          
     BEGIN                                                              11279000          
     VAR_VALUE := 12 ;                                                  11280000          
     END ;                                                              11281000          
%                                                                       11282000          
 IF VAR_VALUE < 10 THEN                                                 11283000          
     BEGIN                                                              11284000          
     REPLACE B_VAR_DEST BY                                              11285000          
         STRING (VAR_VALUE, 1) ;                                        11286000          
     END                                                                11287000          
 ELSE IF VAR_VALUE = 12 THEN                                            11288000          
     BEGIN                                                              11289000          
     REPLACE B_VAR_DEST BY                                              11290000          
         "0" ;                                                          11291000          
     END                                                                11292000          
 ELSE IF VAR_VALUE = 11 THEN                                            11293000          
     BEGIN                                                              11294000          
     REPLACE B_VAR_DEST BY                                              11295000          
         "@" ;                                                          11296000          
     END                                                                11297000          
 ELSE IF VAR_VALUE = 10 THEN                                            11298000          
     BEGIN                                                              11299000          
     REPLACE B_VAR_DEST BY                                              11300000          
         "#" ;                                                          11301000          
     END ;                                                              11302000          
%                                                                       11303000          
 REPLACE B_VAR_DEST BY                  % Translate to B300             11304000          
     B_VAR_DEST FOR 1                                                   11305000          
         WITH C_TO_B ;                                                  11306000          
%                                                                       11307000          
 BUILD_VARIANT := VAR_VALUE ;           % Return variant value          11308000          
%                                                                       11309000          
 BUILD_VARIANT_EXIT:                                                    11310000          
%                                                                       11311000          
 END BUILD_VARIANT ;                                                    11312000          
%                                                                       11313000          
%-----------------------------------------------------------------------11314000          
% INSTRUCTION_OFFSET                                                    11315000          
%-----------------------------------------------------------------------11316000          
 INTEGER PROCEDURE INSTRUCTION_OFFSET                                   11317000          
     (                                                                  11318000          
     OFFSET_CHAR                                                        11319000          
     ) ;                                                                11320000          
 VALUE                                                                  11321000          
     OFFSET_CHAR                                                        11322000          
     ;                                                                  11323000          
 POINTER                                                                11324000          
     OFFSET_CHAR                                                        11325000          
     ;                                                                  11326000          
 BEGIN                                                                  11327000          
%                                                                       11328000          
 INSTRUCTION_OFFSET := 0 ;                                              11329000          
%                                                                       11330000          
 IF OFFSET_CHAR = "0" THEN                                              11331000          
     BEGIN                                                              11332000          
     INSTRUCTION_OFFSET := 12 ;                                         11333000          
     END                                                                11334000          
 ELSE IF OFFSET_CHAR = "1" THEN                                         11335000          
     BEGIN                                                              11336000          
     INSTRUCTION_OFFSET := 1 ;                                          11337000          
     END                                                                11338000          
 ELSE IF OFFSET_CHAR = "2" THEN                                         11339000          
     BEGIN                                                              11340000          
     INSTRUCTION_OFFSET := 2 ;                                          11341000          
     END                                                                11342000          
 ELSE IF OFFSET_CHAR = "3" THEN                                         11343000          
     BEGIN                                                              11344000          
     INSTRUCTION_OFFSET := 3 ;                                          11345000          
     END                                                                11346000          
 ELSE IF OFFSET_CHAR = "4" THEN                                         11347000          
     BEGIN                                                              11348000          
     INSTRUCTION_OFFSET := 4 ;                                          11349000          
     END                                                                11350000          
 ELSE IF OFFSET_CHAR = "5" THEN                                         11351000          
     BEGIN                                                              11352000          
     INSTRUCTION_OFFSET := 5 ;                                          11353000          
     END                                                                11354000          
 ELSE IF OFFSET_CHAR = "6" THEN                                         11355000          
     BEGIN                                                              11356000          
     INSTRUCTION_OFFSET := 6 ;                                          11357000          
     END                                                                11358000          
 ELSE IF OFFSET_CHAR = "7" THEN                                         11359000          
     BEGIN                                                              11360000          
     INSTRUCTION_OFFSET := 7 ;                                          11361000          
     END                                                                11362000          
 ELSE IF OFFSET_CHAR = "8" THEN                                         11363000          
     BEGIN                                                              11364000          
     INSTRUCTION_OFFSET := 8 ;                                          11365000          
     END                                                                11366000          
 ELSE IF OFFSET_CHAR = "9" THEN                                         11367000          
     BEGIN                                                              11368000          
     INSTRUCTION_OFFSET := 9 ;                                          11369000          
     END                                                                11370000          
 ELSE IF OFFSET_CHAR = "T" THEN                                         11371000          
     BEGIN                                                              11372000          
     INSTRUCTION_OFFSET := 10 ;                                         11373000          
     END                                                                11374000          
 ELSE IF OFFSET_CHAR = "E" THEN                                         11375000          
     BEGIN                                                              11376000          
     INSTRUCTION_OFFSET := 11 ;                                         11377000          
     END                                                                11378000          
 ELSE IF OFFSET_CHAR = "O" THEN                                         11379000          
     BEGIN                                                              11380000          
     INSTRUCTION_OFFSET := 0 ;                                          11381000          
     END                                                                11382000          
 ELSE IF OFFSET_CHAR = "M" THEN                                         11383000          
     BEGIN                                                              11384000          
     INSTRUCTION_OFFSET := 1 ;                                          11385000          
     END                                                                11386000          
 ELSE IF OFFSET_CHAR = "N" THEN                                         11387000          
     BEGIN                                                              11388000          
     INSTRUCTION_OFFSET := 2 ;                                          11389000          
     END                                                                11390000          
 ELSE IF OFFSET_CHAR = "A" THEN                                         11391000          
     BEGIN                                                              11392000          
     INSTRUCTION_OFFSET := 3 ;                                          11393000          
     END                                                                11394000          
 ELSE IF OFFSET_CHAR = "B" THEN                                         11395000          
     BEGIN                                                              11396000          
     INSTRUCTION_OFFSET := 6 ;                                          11397000          
     END                                                                11398000          
 ELSE IF OFFSET_CHAR = "C" THEN                                         11399000          
     BEGIN                                                              11400000          
     INSTRUCTION_OFFSET := 9 ;                                          11401000          
     END                                                                11402000          
 ELSE IF OFFSET_CHAR = "J" THEN                                         11403000          
     BEGIN                                                              11404000          
     INSTRUCTION_OFFSET := 12 ;                                         11405000          
     END                                                                11406000          
 ELSE IF OFFSET_CHAR = "K" THEN                                         11407000          
     BEGIN                                                              11408000          
     INSTRUCTION_OFFSET := 24 ;                                         11409000          
     END                                                                11410000          
 ELSE IF OFFSET_CHAR = "L" THEN                                         11411000          
     BEGIN                                                              11412000          
     INSTRUCTION_OFFSET := 36 ;                                         11413000          
     END ;                                                              11414000          
%                                                                       11415000          
 END INSTRUCTION_OFFSET ;                                               11416000          
%                                                                       11417000          
%-----------------------------------------------------------------------11418000          
%                                                                       11419000          
% REFERENCE_INDEX_CREATE - Create binary tree index of source references11420000          
%                                                                       11421000          
%-----------------------------------------------------------------------11422000          
 INTEGER PROCEDURE REFERENCE_INDEX_CREATE ;                             11423000          
 BEGIN                                                                  11424000          
%                                                                       11425000          
 LABEL                                                                  11426000          
     REFERENCE_INDEX_CREATE_EXIT                                        11427000          
     ;                                                                  11428000          
 INTEGER                                                                11429000          
     REFERENCE_HANDLE ,         % Global to sort procedures             11430000          
     REFERENCE_HANDLE_LAST ,    % Test for duplicates                   11431000          
     NODE_NEXT_AVAILABLE        % Next index node                       11432000          
     ;                                                                  11433000          
%---------------------------------------------                          11434000          
% SORT_OUT                                                              11435000          
%---------------------------------------------                          11436000          
 PROCEDURE SORT_OUT                                                     11437000          
     (                                                                  11438000          
     DONE_FLAG,                                                         11439000          
     SORT_RECORD                                                        11440000          
     ) ;                                                                11441000          
 VALUE                                                                  11442000          
     DONE_FLAG                                                          11443000          
     ;                                                                  11444000          
 BOOLEAN                                                                11445000          
     DONE_FLAG                                                          11446000          
     ;                                                                  11447000          
 REAL ARRAY                                                             11448000          
     SORT_RECORD [0]                                                    11449000          
     ;                                                                  11450000          
 BEGIN                                                                  11451000          
%                                                                       11452000          
 IF ^ DONE_FLAG THEN                                                    11453000          
     BEGIN                              % Build index node              11454000          
     IF REFERENCE_HANDLE_LAST >= 0                                      11455000          
     CAND C_SOURCE_PAGE (SORT_RECORD [0]) % Check for duplicate         11456000          
             = C_SOURCE_PAGE (REFERENCE_HANDLE_LAST) FOR 3 THEN         11457000          
         BEGIN                          % Duplicate reference - drop    11458000          
         C_SOURCE_SET_REF_ERROR (SORT_RECORD [0]) ;                     11459000          
         END                                                            11460000          
     ELSE                                                               11461000          
         BEGIN                          % Build index node              11462000          
         REFERENCE_NODE_HANDLE (NODE_NEXT_AVAILABLE)                    11463000          
              := SORT_RECORD [0] ;                                      11464000          
         REFERENCE_NODE_LOW (NODE_NEXT_AVAILABLE) := -1 ;               11465000          
         REFERENCE_NODE_HIGH (NODE_NEXT_AVAILABLE) := -1 ;              11466000          
         REFERENCE_NODE_COUNT (NODE_NEXT_AVAILABLE) := 0 ;              11467000          
         NODE_NEXT_AVAILABLE := * + REFERENCE_NODE_SIZE ;               11468000          
         REFERENCE_HANDLE_LAST := SORT_RECORD [0] ;                     11469000          
         END ;                                                          11470000          
     END ;                                                              11471000          
%                                                                       11472000          
 END SORT_OUT ;                                                         11473000          
%------------------------------------                                   11474000          
% SORT_IN                                                               11475000          
%------------------------------------                                   11476000          
 BOOLEAN PROCEDURE SORT_IN                                              11477000          
     (                                                                  11478000          
     HANDLE                                                             11479000          
     ) ;                                                                11480000          
 REAL ARRAY                                                             11481000          
     HANDLE [0]                                                         11482000          
     ;                                                                  11483000          
 BEGIN                                                                  11484000          
%                                                                       11485000          
 IF REFERENCE_HANDLE >= REFERENCE_HANDLE_NEXT THEN                      11486000          
     BEGIN                                                              11487000          
     SORT_IN := TRUE ;                  % Done                          11488000          
     END                                                                11489000          
 ELSE                                                                   11490000          
     BEGIN                                                              11491000          
     HANDLE [0] := REFERENCE_HANDLES [REFERENCE_HANDLE] ;               11492000          
     REFERENCE_HANDLE := * + 1 ;                                        11493000          
     SORT_IN := FALSE ;                 % More to go                    11494000          
     END ;                                                              11495000          
%                                                                       11496000          
 END SORT_IN ;                                                          11497000          
%------------------------------                                         11498000          
% SORT_COMPARE                                                          11499000          
%------------------------------                                         11500000          
 BOOLEAN PROCEDURE SORT_COMPARE                                         11501000          
     (                                                                  11502000          
     HANDLE_A,                                                          11503000          
     HANDLE_B                                                           11504000          
     ) ;                                                                11505000          
 REAL ARRAY                                                             11506000          
     HANDLE_A [0] ,                                                     11507000          
     HANDLE_B [0]                                                       11508000          
     ;                                                                  11509000          
 BEGIN                                                                  11510000          
%----                                                                   11511000          
%---- If references are equal, return card number compare               11512000          
%---- This will be detected as a duplicate reference                    11513000          
%----                                                                   11514000          
 SORT_COMPARE :=                                                        11515000          
     (IF C_SOURCE_PAGE (HANDLE_A [0])                                   11516000          
             = C_SOURCE_PAGE (HANDLE_B [0]) FOR 3 THEN                  11517000          
         C_SOURCE_CARD_NUMBER (HANDLE_A [0])                            11518000          
             < C_SOURCE_CARD_NUMBER (HANDLE_A [0])                      11519000          
     ELSE                                                               11520000          
         C_SOURCE_PAGE (HANDLE_A [0])                                   11521000          
             < C_SOURCE_PAGE (HANDLE_B [0]) FOR 3) ;                    11522000          
%                                                                       11523000          
 END SORT_COMPARE ;                                                     11524000          
%-----------------------------------                                    11525000          
% BUILD_BINARY_TREE                                                     11526000          
%   Populate REFERENCE_NODE_LOW,                                        11527000          
%            REFERENCE_NODE_HIGH                                        11528000          
%-----------------------------------                                    11529000          
 INTEGER PROCEDURE BUILD_BINARY_TREE                                    11530000          
     (                                                                  11531000          
     LOW_IDX ,                  % 1st node of search range              11532000          
     HIGH_IDX                   % Last node                             11533000          
     ) ;                                                                11534000          
 VALUE                                                                  11535000          
     LOW_IDX ,                                                          11536000          
     HIGH_IDX                                                           11537000          
     ;                                                                  11538000          
 INTEGER                                                                11539000          
     LOW_IDX ,                                                          11540000          
     HIGH_IDX                                                           11541000          
     ;                                                                  11542000          
 BEGIN                                                                  11543000          
%                                                                       11544000          
 LABEL                                                                  11545000          
     BUILD_BINARY_TREE_EXIT                                             11546000          
     ;                                                                  11547000          
 INTEGER                                                                11548000          
     MY_IDX                             % My node                       11549000          
     ;                                                                  11550000          
 IF LOW_IDX > HIGH_IDX THEN                                             11551000          
     BEGIN                              % No more, bail out             11552000          
     BUILD_BINARY_TREE := -1 ;          % No child node                 11553000          
     GO TO BUILD_BINARY_TREE_EXIT ;                                     11554000          
     END ;                                                              11555000          
%----                                                                   11556000          
%---- Midpoint NODE between high and low indexes (NODEs) is my node     11557000          
%----                                                                   11558000          
 MY_IDX := (LOW_IDX + HIGH_IDX) DIV 2 ; % Calculate mid point index     11559000          
 MY_IDX := * - ((MY_IDX - LOW_IDX) MOD REFERENCE_NODE_SIZE) ; % Align   11560000          
%----                                                                   11561000          
%---- Set LOW/HIGH search path nodes                                    11562000          
%----                                                                   11563000          
 REFERENCE_NODE_LOW (MY_IDX)                                            11564000          
     := BUILD_BINARY_TREE (LOW_IDX ,                                    11565000          
                           (MY_IDX - REFERENCE_NODE_SIZE)) ;            11566000          
%DISPLAY (                                                              11567000          
%    STRING (C_SOURCE_PAGE (REFERENCE_NODE_HANDLE (MY_IDX)), 3)) ;      11568000          
 REFERENCE_NODE_HIGH (MY_IDX)                                           11569000          
     := BUILD_BINARY_TREE ((MY_IDX + REFERENCE_NODE_SIZE) ,             11570000          
                           HIGH_IDX) ;                                  11571000          
%                                                                       11572000          
 BUILD_BINARY_TREE := MY_IDX ;          % Return my node index          11573000          
%                                                                       11574000          
 BUILD_BINARY_TREE_EXIT:                                                11575000          
%                                                                       11576000          
 END BUILD_BINARY_TREE ;                                                11577000          
%                                                                       11578000          
%-----------------------------------                                    11579000          
% OBJECT_INDEX_CREATE - Main                                            11580000          
%-----------------------------------                                    11581000          
%                                                                       11582000          
%INTEGER                                                                11583000          
%    HANDLE                                                             11584000          
%    ;                                                                  11585000          
 REFERENCE_INDEX_CREATE := (-1) ;                                       11586000          
%----                                                                   11587000          
%---- Sort nodes by SOURCE REFERENCE                                    11588000          
%----                                                                   11589000          
 REFERENCE_HANDLE := 0 ;                                                11590000          
 REFERENCE_HANDLE_LAST := -1 ;                                          11591000          
 NODE_NEXT_AVAILABLE := 0 ;                                             11592000          
 SORT (SORT_OUT ,               % Output procedure                      11593000          
       SORT_IN ,                % Input procedure                       11594000          
       0 ,                      % No tapes                              11595000          
       SORT_COMPARE ,           % Compare procedure                     11596000          
       1) ;                     % Sort record WORD length               11597000          
%----                                                                   11598000          
%---- Build binary tree index from sorted index nodes                   11599000          
%----                                                                   11600000          
 REFERENCE_INDEX_ROOT                                                   11601000          
     := BUILD_BINARY_TREE (0,                                           11602000          
                          (NODE_NEXT_AVAILABLE - REFERENCE_NODE_SIZE)) ;11603000          
%                                                                       11604000          
 REFERENCE_INDEX_CREATE := REFERENCE_INDEX_ROOT ;                       11605000          
%                                                                       11606000          
 REFERENCE_INDEX_CREATE_EXIT :                                          11607000          
%                                                                       11608000          
 END REFERENCE_INDEX_CREATE ;                                           11609000          
%                                                                       11610000          
%-----------------------------------------------------------------------11611000          
% REFERENCE_INDEX_SEARCH                                                11612000          
%-----------------------------------------------------------------------11613000          
 INTEGER PROCEDURE REFERENCE_INDEX_SEARCH                               11614000          
     (                                                                  11615000          
     REF_PTR                                                            11616000          
     ) ;                                                                11617000          
 VALUE                                                                  11618000          
     REF_PTR                                                            11619000          
     ;                                                                  11620000          
 POINTER                                                                11621000          
     REF_PTR                                                            11622000          
     ;                                                                  11623000          
 BEGIN                                                                  11624000          
%                                                                       11625000          
 INTEGER                                                                11626000          
     NODE                                                               11627000          
     ;                                                                  11628000          
 BOOLEAN                                                                11629000          
     FOUND                                                              11630000          
     ;                                                                  11631000          
 REFERENCE_INDEX_SEARCH := (-1) ;                                       11632000          
%                                                                       11633000          
 FOUND := FALSE ;                                                       11634000          
 NODE := REFERENCE_INDEX_ROOT ;                                         11635000          
%                                                                       11636000          
 WHILE ^ FOUND                                                          11637000          
 CAND NODE >= 0 DO                                                      11638000          
     BEGIN                                                              11639000          
     IF ^ (FOUND := REF_PTR                                             11640000          
             = C_SOURCE_PAGE (REFERENCE_NODE_HANDLE (NODE)) FOR 3) THEN 11641000          
         BEGIN                                                          11642000          
         IF REF_PTR                                                     11643000          
              < C_SOURCE_PAGE (REFERENCE_NODE_HANDLE (NODE)) FOR 3 THEN 11644000          
             BEGIN                                                      11645000          
             NODE := REFERENCE_NODE_LOW (NODE) ;                        11646000          
             END                                                        11647000          
         ELSE                                                           11648000          
             BEGIN                                                      11649000          
             NODE := REFERENCE_NODE_HIGH (NODE) ;                       11650000          
             END ;                                                      11651000          
         END ;                                                          11652000          
     END ;                                                              11653000          
%                                                                       11654000          
 IF FOUND THEN                                                          11655000          
     BEGIN                                                              11656000          
     REFERENCE_NODE_COUNT (NODE) := * + 1 ;     % Reference count       11657000          
     REFERENCE_INDEX_SEARCH                     % Return mem index      11658000          
         := C_SOURCE_MEM_INDEX (REFERENCE_NODE_HANDLE (NODE))           11659000          
                             + INSTRUCTION_OFFSET (REF_PTR + 3) ;       11660000          
     END ;                                                              11661000          
%                                                                       11662000          
 END REFERENCE_INDEX_SEARCH ;                                           11663000          
%                                                                       11664000          
%-----------------------------------------------------------------------11665000          
% BUILD_ADDRESS                                                         11666000          
%-----------------------------------------------------------------------11667000          
 INTEGER PROCEDURE BUILD_ADDRESS                                        11668000          
     (                                                                  11669000          
     HANDLE ,                                                           11670000          
     ADD_SOURCE ,                                                       11671000          
     ADD_LENGTH ,                                                       11672000          
     ADD_DEST                                                           11673000          
     ) ;                                                                11674000          
 VALUE                                                                  11675000          
     HANDLE ,                                                           11676000          
     ADD_SOURCE ,                                                       11677000          
     ADD_LENGTH ,                                                       11678000          
     ADD_DEST                                                           11679000          
     ;                                                                  11680000          
 INTEGER                                                                11681000          
     HANDLE ,                                                           11682000          
     ADD_LENGTH                                                         11683000          
     ;                                                                  11684000          
 POINTER                                                                11685000          
     ADD_SOURCE ,                                                       11686000          
     ADD_DEST                                                           11687000          
     ;                                                                  11688000          
 BEGIN                                                                  11689000          
%                                                                       11690000          
 INTEGER                                                                11691000          
     MEM_IDX                                                            11692000          
     ;                                                                  11693000          
%                                                                       11694000          
 LABEL                                                                  11695000          
     BUILD_ADDRESS_EXIT                                                 11696000          
     ;                                                                  11697000          
 REPLACE ADDRESS_WORK BY                                                11698000          
     ADD_SOURCE FOR 4 ;                                                 11699000          
 IF ADDRESS_WORK = " " FOR 4 THEN                                       11700000          
     BEGIN                                                              11701000          
     BUILD_ADDRESS := 0 ;                                               11702000          
     GO TO BUILD_ADDRESS_EXIT ;                                         11703000          
     END ;                                                              11704000          
%                                                                       11705000          
 BUILD_ADDRESS := (-1) ;                                                11706000          
%                                                                       11707000          
 IF ADDRESS_WORK [0] = "*" THEN                                         11708000          
     BEGIN                                                              11709000          
     IF ADD_LENGTH <= 0 THEN                                            11710000          
         BEGIN                                                          11711000          
         GO TO BUILD_ADDRESS_EXIT ;                                     11712000          
         END ;                                                          11713000          
     MEM_IDX := C_MEMORY_INDEX ;                                        11714000          
     BUMP_C_MEMORY_INDEX (ADD_LENGTH) ;                                 11715000          
     REPLACE B_MEMORY [MEM_IDX] BY                                      11716000          
         C_SOURCE_CONSTANTS (HANDLE) FOR ADD_LENGTH                     11717000          
             WITH C_TO_B ;                                              11718000          
     END                                                                11719000          
 ELSE IF ADDRESS_WORK [0] = "-" THEN                                    11720000          
     BEGIN                                                              11721000          
     MEM_IDX := C_SOURCE_MEM_INDEX (HANDLE) + 12 ;                      11722000          
     END                                                                11723000          
 ELSE IF ADDRESS_WORK [0] = "M" THEN                                    11724000          
     BEGIN                                                              11725000          
     REPLACE ADD_DEST BY                                                11726000          
         ADDRESS_WORK [1] FOR 3                                         11727000          
             WITH C_TO_B ;                                              11728000          
     BUILD_ADDRESS := 0 ;                                               11729000          
     GO TO BUILD_ADDRESS_EXIT ;                                         11730000          
     END                                                                11731000          
 ELSE IF ADDRESS_WORK [2] = "*" THEN                                    11732000          
     BEGIN                                                              11733000          
     MEM_IDX := C_SOURCE_MEM_INDEX (HANDLE)                             11734000          
                + INSTRUCTION_OFFSET (ADDRESS_WORK [3]) ;               11735000          
     END                                                                11736000          
 ELSE IF ADDRESS_WORK [2] ^= " " THEN                                   11737000          
     BEGIN                                                              11738000          
     REPLACE ADDRESS_WORK [0] BY                                        11739000          
         ADDRESS_WORK [0] FOR 2                                         11740000          
             WITH SPACE_TO_ZERO ;                                       11741000          
     MEM_IDX := REFERENCE_INDEX_SEARCH (ADDRESS_WORK) ;                 11742000          
     IF MEM_IDX < 0 THEN                                                11743000          
         BEGIN                                                          11744000          
         GO TO BUILD_ADDRESS_EXIT ;                                     11745000          
         END ;                                                          11746000          
     END                                                                11747000          
 ELSE                                                                   11748000          
     BEGIN                                                              11749000          
%    DISPLAY (STRING (ADDRESS_WORK, 4)) ;                               11750000          
     END ;                                                              11751000          
%                                                                       11752000          
 C_INDEX_TO_B_ADDRESS (MEM_IDX, ADD_DEST) ;                             11753000          
 BUILD_ADDRESS := MEM_IDX ;                                             11754000          
%                                                                       11755000          
 BUILD_ADDRESS_EXIT:                                                    11756000          
%                                                                       11757000          
 END BUILD_ADDRESS ;                                                    11758000          
%                                                                       11759000          
%-----------------------------------------------------------------------11760000          
% BUILD_INSTRUCTION - Build B300 instruction fields based on filter     11761000          
% Inputs:                                                               11762000          
%   HANDLE - Source input fields                                        11763000          
%   B_OP_CODE - Instruction Op code                                     11764000          
%   FILTER - Determines which instruction fields to build               11765000          
%-----------------------------------------------------------------------11766000          
 INTEGER PROCEDURE BUILD_INSTRUCTION                                    11767000          
     (                                                                  11768000          
     HANDLE ,                                                           11769000          
     B_OP_CODE ,                                                        11770000          
     FILTER                                                             11771000          
     ) ;                                                                11772000          
 VALUE                                                                  11773000          
     HANDLE ,                                                           11774000          
     FILTER                                                             11775000          
     ;                                                                  11776000          
 INTEGER                                                                11777000          
     HANDLE ,                                                           11778000          
     FILTER                                                             11779000          
     ;                                                                  11780000          
 STRING                                                                 11781000          
     B_OP_CODE                                                          11782000          
     ;                                                                  11783000          
 BEGIN                                                                  11784000          
%                                                                       11785000          
 INTEGER                                                                11786000          
     M_VAR_LENGTH ,                                                     11787000          
     N_VAR_LENGTH                                                       11788000          
     ;                                                                  11789000          
 M_VAR_LENGTH := 0 ;                                                    11790000          
 N_VAR_LENGTH := 0 ;                                                    11791000          
%                                                                       11792000          
 REPLACE C_SOURCE_MEM_CODE_OP (HANDLE) BY       % OP code               11793000          
     B_OP_CODE ;                                                        11794000          
%                                                                       11795000          
 IF INCLUDE_M_VAR (FILTER) THEN                                         11796000          
     BEGIN                                      % M variant             11797000          
     M_VAR_LENGTH := BUILD_VARIANT (C_SOURCE_M (HANDLE) ,               11798000          
                                    C_SOURCE_MEM_CODE_M (HANDLE)) ;     11799000          
     END ;                                                              11800000          
%                                                                       11801000          
 IF INCLUDE_N_VAR (FILTER) THEN                                         11802000          
     BEGIN                                      % N variant             11803000          
     N_VAR_LENGTH := BUILD_VARIANT (C_SOURCE_N (HANDLE) ,               11804000          
                                    C_SOURCE_MEM_CODE_N (HANDLE)) ;     11805000          
     END ;                                                              11806000          
%                                                                       11807000          
 IF INCLUDE_A_ADD (FILTER) THEN                                         11808000          
     BEGIN                                      % A address             11809000          
     IF BUILD_ADDRESS (HANDLE ,                                         11810000          
                       C_SOURCE_A_ADDRESS (HANDLE) ,                    11811000          
                       M_VAR_LENGTH ,                                   11812000          
                       C_SOURCE_MEM_CODE_A (HANDLE)) < 0 THEN           11813000          
         BEGIN                                                          11814000          
         C_SOURCE_SET_A_ERROR (HANDLE) ;                                11815000          
         END ;                                                          11816000          
     END ;                                                              11817000          
%                                                                       11818000          
 IF INCLUDE_B_ADD (FILTER) THEN                                         11819000          
     BEGIN                                      % B address             11820000          
     IF BUILD_ADDRESS (HANDLE ,                                         11821000          
                       C_SOURCE_B_ADDRESS (HANDLE) ,                    11822000          
                       N_VAR_LENGTH ,                                   11823000          
                       C_SOURCE_MEM_CODE_B (HANDLE)) < 0 THEN           11824000          
         BEGIN                                                          11825000          
         C_SOURCE_SET_B_ERROR (HANDLE) ;                                11826000          
         END ;                                                          11827000          
     END ;                                                              11828000          
%                                                                       11829000          
 IF INCLUDE_C_ADD (FILTER) THEN                                         11830000          
     BEGIN                                      % C address             11831000          
     IF BUILD_ADDRESS (HANDLE ,                                         11832000          
                       C_SOURCE_C_ADDRESS (HANDLE) ,                    11833000          
                       0 ,                                              11834000          
                       C_SOURCE_MEM_CODE_C (HANDLE)) < 0 THEN           11835000          
         BEGIN                                                          11836000          
         C_SOURCE_SET_C_ERROR (HANDLE) ;                                11837000          
         END ;                                                          11838000          
     END ;                                                              11839000          
%                                                                       11840000          
 END BUILD_INSTRUCTION ;                                                11841000          
%                                                                       11842000          
%-----------------------------------------------------------------------11843000          
% BUILD_ADM_QUANTITY -                                                  11844000          
%-----------------------------------------------------------------------11845000          
 INTEGER PROCEDURE BUILD_ADM_QUANTITY                                   11846000          
     (                                                                  11847000          
     HANDLE                                                             11848000          
     ) ;                                                                11849000          
 VALUE                                                                  11850000          
     HANDLE                                                             11851000          
     ;                                                                  11852000          
 INTEGER                                                                11853000          
     HANDLE                                                             11854000          
     ;                                                                  11855000          
 BEGIN                                                                  11856000          
%                                                                       11857000          
 POINTER                                                                11858000          
     AAA_PTR                                                            11859000          
     ;                                                                  11860000          
 INTEGER                                                                11861000          
     ADM_LENGTH ,                                                       11862000          
     B_CHAR                                                             11863000          
     ;                                                                  11864000          
 LABEL                                                                  11865000          
     BUILD_ADM_QUANTITY_EXIT                                            11866000          
     ;                                                                  11867000          
 REPLACE ADDRESS_WORK BY                                                11868000          
     C_SOURCE_A_ADDRESS (HANDLE) FOR 4 ;                                11869000          
 AAA_PTR := ADDRESS_WORK ;                                              11870000          
%                                                                       11871000          
 IF AAA_PTR = "M" THEN                                                  11872000          
     BEGIN                              % Machine code                  11873000          
     REPLACE C_SOURCE_MEM_CODE_A (HANDLE) BY                            11874000          
         AAA_PTR + 1 FOR 3                                              11875000          
             WITH C_TO_B ;                                              11876000          
     END                                                                11877000          
 ELSE                                                                   11878000          
     BEGIN                                                              11879000          
     REPLACE AAA_PTR BY                                                 11880000          
         AAA_PTR FOR 4                                                  11881000          
             WITH SPACE_TO_ZERO ;                                       11882000          
     IF ^ AAA_PTR IN "0123456789" FOR 4 THEN                            11883000          
         BEGIN                                                          11884000          
         C_SOURCE_SET_A_ERROR (HANDLE) ;                                11885000          
         GO TO BUILD_ADM_QUANTITY_EXIT ;                                11886000          
         END ;                                                          11887000          
     ADM_LENGTH := DECIMAL (STRING (AAA_PTR, 4)) ;                      11888000          
     IF ADM_LENGTH > 1200 THEN                                          11889000          
         BEGIN                                                          11890000          
         C_SOURCE_SET_A_ERROR (HANDLE) ;                                11891000          
         GO TO BUILD_ADM_QUANTITY_EXIT ;                                11892000          
         END ;                                                          11893000          
     B_CHAR := ADM_LENGTH DIV 120 ;                                     11894000          
     REPLACE C_SOURCE_MEM_CODE_A (HANDLE) BY                            11895000          
         B_ADDRESS_SECTIONS [B_CHAR] FOR 1                              11896000          
             WITH C_TO_B ;                                              11897000          
     ADM_LENGTH := * MOD 120 ;                                          11898000          
     B_CHAR := ADM_LENGTH DIV 10 ;                                      11899000          
     REPLACE (C_SOURCE_MEM_CODE_A (HANDLE)) + 1 BY                      11900000          
         B_ADDRESS_FIELDS [B_CHAR] FOR 1 ;                              11901000          
     ADM_LENGTH := * MOD 12 ;                                           11902000          
     REPLACE (C_SOURCE_MEM_CODE_A (HANDLE)) + 2 BY                      11903000          
         B_ADDRESS_CHARS [ADM_LENGTH] FOR 1 ;                           11904000          
     END ;                                                              11905000          
%                                                                       11906000          
 BUILD_ADM_QUANTITY_EXIT:                                               11907000          
%                                                                       11908000          
 END BUILD_ADM_QUANTITY ;                                               11909000          
%                                                                       11910000          
%-----------------------------------------------------------------------11911000          
% BUILD_ERROR_OP_CODE - Substitute NOP for invalid OP code              11912000          
%-----------------------------------------------------------------------11913000          
 INTEGER PROCEDURE BUILD_ERROR_OP_CODE                                  11914000          
     (                                                                  11915000          
     HANDLE                                                             11916000          
     ) ;                                                                11917000          
 VALUE                                                                  11918000          
     HANDLE                                                             11919000          
     ;                                                                  11920000          
 INTEGER                                                                11921000          
     HANDLE                                                             11922000          
     ;                                                                  11923000          
 BEGIN                                                                  11924000          
%                                                                       11925000          
 C_SOURCE_SET_OP_ERROR (HANDLE) ;                                       11926000          
%                                                                       11927000          
 BUILD_INSTRUCTION (HANDLE, B_NOP_OP, ALL_VAR_ADD) ;                    11928000          
%                                                                       11929000          
 END BUILD_ERROR_OP_CODE ;                                              11930000          
%                                                                       11931000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%11932000          
 DEFINE                                                                 11933000          
     LINE_COUNT_MAX             = 50 # ,                                11934000          
     UNHANDLED_OP_CODE (HAN)    =                                       11935000          
         BEGIN                                                          11936000          
         C_SOURCE_SET_OP_UNHANDLED_ERROR (HAN) ;                        11937000          
         BUILD_INSTRUCTION (HAN, B_NOP_OP, ALL_VAR_ADD) ;               11938000          
         END # ,                                                        11939000          
     TRANSFER_CONDITION (HAN)   =                                       11940000          
         BEGIN                                                          11941000          
         IF ^ C_SOURCE_MEM_CODE_M (HAN) IN TRAN_M_ALLOWED FOR 1 THEN    11942000          
             BEGIN                                                      11943000          
             REPLACE C_SOURCE_MEM_CODE_M (HAN) BY                       11944000          
                 B_ZERO FOR 1 ;                                         11945000          
             END ;                                                      11946000          
         IF ^ C_SOURCE_MEM_CODE_N (HAN) IN TRAN_N_ALLOWED FOR 1 THEN    11947000          
             BEGIN                                                      11948000          
             REPLACE C_SOURCE_MEM_CODE_N (HAN) BY                       11949000          
                 B_ZERO FOR 1 ;                                         11950000          
             END ;                                                      11951000          
         END #                                                          11952000          
     ;                                                                  11953000          
 TRUTHSET                                                               11954000          
     TRAN_M_ALLOWED                                                     11955000          
         (                                                              11956000          
         B_000000       % 0-9                                           11957000          
         OR B_000001                                                    11958000          
         OR B_000010                                                    11959000          
         OR B_000011                                                    11960000          
         OR B_000100                                                    11961000          
         OR B_000101                                                    11962000          
         OR B_000110                                                    11963000          
         OR B_000111                                                    11964000          
         OR B_001000                                                    11965000          
         OR B_001001                                                    11966000          
         ) ,                                                            11967000          
     TRAN_N_ALLOWED                                                     11968000          
         (                                                              11969000          
         B_000000       % 0-9,#,@                                       11970000          
         OR B_000001                                                    11971000          
         OR B_000010                                                    11972000          
         OR B_000011                                                    11973000          
         OR B_000100                                                    11974000          
         OR B_000101                                                    11975000          
         OR B_000110                                                    11976000          
         OR B_000111                                                    11977000          
         OR B_001000                                                    11978000          
         OR B_001001                                                    11979000          
         OR B_001010                                                    11980000          
         OR B_001011                                                    11981000          
         )                                                              11982000          
     ;                                                                  11983000          
%-----------------------------------------------------------------------11984000          
% PRINT_HEADING                                                         11985000          
%-----------------------------------------------------------------------11986000          
 INTEGER PROCEDURE PRINT_HEADING ;                                      11987000          
 BEGIN                                                                  11988000          
%                                                                       11989000          
 PAGE_NUMBER := * + 1 ;                                                 11990000          
 REPLACE PRINT_HEADING_1 [PAGE_NUMBER_OFFSET] BY                        11991000          
     STRING (PAGE_NUMBER, 4) ;                                          11992000          
%                                                                       11993000          
 WRITE (PRINTOUT [SKIP 1], 0, PRINT_HEADING_1) ;                        11994000          
 WRITE (PRINTOUT [SPACE 2], 0, PRINT_HEADING_1) ;                       11995000          
 WRITE (PRINTOUT [SPACE 2], SIZE (PRINT_HEADING_1), PRINT_HEADING_1) ;  11996000          
%                                                                       11997000          
 PRINT_HEADING := 4 ;                   % Lines printed                 11998000          
%                                                                       11999000          
 END PRINT_HEADING ;                                                    12000000          
%                                                                       12001000          
%-----------------------------------------------------------------------12002000          
% SECOND_PASS                                                           12003000          
%   o Iterate through C_SOURCE table                                    12004000          
%   o Build instruction code                                            12005000          
%   o Resolve reference addresses                                       12006000          
%   o A b300 memory map (B_MEMORY) is built from the C_SOURCE table     12007000          
%-----------------------------------------------------------------------12008000          
 INTEGER PROCEDURE SECOND_PASS ;                                        12009000          
 BEGIN                                                                  12010000          
%                                                                       12011000          
 INTEGER                                                                12012000          
     HANDLE ,                                                           12013000          
     LINE_COUNT                                                         12014000          
     ;                                                                  12015000          
 STRING                                                                 12016000          
     OP_CODE                                                            12017000          
     ;                                                                  12018000          
 BOOLEAN                                                                12019000          
     SOURCE_END ,                                                       12020000          
     PRINT_FORMATTED_SOURCE ,                                           12021000          
     PRINT_MEMORY_LOCATION                                              12022000          
     ;                                                                  12023000          
%-----------------------------                                          12024000          
% SECOND_PASS_HEADING                                                   12025000          
%-----------------------------                                          12026000          
 PROCEDURE SECOND_PASS_HEADING ;                                        12027000          
 BEGIN                                                                  12028000          
%                                                                       12029000          
 LINE_COUNT := PRINT_HEADING ;                                          12030000          
%                                                                       12031000          
 WRITE (PRINTOUT [SPACE 2], SIZE (PRINT_HEADING_2), PRINT_HEADING_2) ;  12032000          
 LINE_COUNT := * + 2 ;                                                  12033000          
%                                                                       12034000          
 END SECOND_PASS_HEADING ;                                              12035000          
%                                                                       12036000          
%-------------------------                                              12037000          
% SECOND_PASS - MAIN                                                    12038000          
%-------------------------                                              12039000          
%                                                                       12040000          
 REFERENCE_INDEX_CREATE ;                                               12041000          
%                                                                       12042000          
 OPEN (PRINTOUT) ;                                                      12043000          
 SECOND_PASS_HEADING ;                                                  12044000          
%                                                                       12045000          
 SOURCE_END := FALSE ;                                                  12046000          
 C_MEMORY_INDEX := C_MEMORY_INDEX_MAX ; % For constants                 12047000          
 REPLACE B_MEMORY BY                                                    12048000          
     B_SPACE FOR SIZE (B_MEMORY) ;                                      12049000          
%                                                                       12050000          
 FOR HANDLE := 0                                                        12051000          
          STEP C_SOURCE_REC_LEN                                         12052000          
          WHILE ^ SOURCE_END                                            12053000          
              CAND HANDLE < C_SOURCE_HANDLE DO                          12054000          
     BEGIN                                                              12055000          
     PRINT_FORMATTED_SOURCE := TRUE ;                                   12056000          
     PRINT_MEMORY_LOCATION := TRUE ;                                    12057000          
     OP_CODE := STRING (C_SOURCE_OP_CODE (HANDLE), 3) ;                 12058000          
     IF OP_CODE = "   " THEN                                            12059000          
         BEGIN                          % Constant                      12060000          
         END                                                            12061000          
     ELSE IF OP_CODE = "HDG" THEN                                       12062000          
         BEGIN                          % HDG - Source documentation    12063000          
         PRINT_FORMATTED_SOURCE := FALSE ;                              12064000          
         END                                                            12065000          
     ELSE IF OP_CODE = "ADD" THEN                                       12066000          
         BEGIN                                                          12067000          
         BUILD_INSTRUCTION (HANDLE, B_ADD_OP, ALL_VAR_ADD) ;            12068000          
         END                                                            12069000          
     ELSE IF OP_CODE = "ADM" THEN                                       12070000          
         BEGIN                                                          12071000          
         BUILD_INSTRUCTION (HANDLE, B_ADM_OP, B_ADD + C_ADD) ;          12072000          
         BUILD_ADM_QUANTITY (HANDLE) ;                                  12073000          
         END                                                            12074000          
     ELSE IF OP_CODE = "BBE" THEN                                       12075000          
         BEGIN                                  % Branch bit equal      12076000          
         BUILD_INSTRUCTION (HANDLE, B_BBE_OP, A_ADD + C_ADD) ;          12077000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12078000          
             C_SOURCE_M (HANDLE) + 1 FOR 1                              12079000          
                 WITH C_TO_B ;                                          12080000          
         REPLACE C_SOURCE_MEM_CODE_N (HANDLE) BY                        12081000          
             B_NINE ;                                                   12082000          
         END                                                            12083000          
     ELSE IF OP_CODE = "BBU" THEN                                       12084000          
         BEGIN                                  % Branch bit unequal    12085000          
         BUILD_INSTRUCTION (HANDLE, B_BBU_OP, A_ADD + C_ADD) ;          12086000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12087000          
             C_SOURCE_M (HANDLE) + 1 FOR 1                              12088000          
                 WITH C_TO_B ;                                          12089000          
         REPLACE C_SOURCE_MEM_CODE_N (HANDLE) BY                        12090000          
             B_AMP ;                                                    12091000          
         END                                                            12092000          
     ELSE IF OP_CODE = "BRC" THEN                                       12093000          
         BEGIN                                                          12094000          
         BUILD_INSTRUCTION (HANDLE, B_BRC_OP, ALL_ADD) ;                12095000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12096000          
             B_ZERO ;                                                   12097000          
         END                                                            12098000          
     ELSE IF OP_CODE = "BRD" THEN                                       12099000          
         UNHANDLED_OP_CODE (HANDLE)                                     12100000          
     ELSE IF OP_CODE = "BRU" THEN                                       12101000          
         BEGIN                                                          12102000          
         BUILD_INSTRUCTION (HANDLE, B_BRU_OP, ALL_ADD) ;                12103000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12104000          
             B_ONE ;                                                    12105000          
         END                                                            12106000          
     ELSE IF OP_CODE = "BSP" THEN                                       12107000          
         UNHANDLED_OP_CODE (HANDLE)                                     12108000          
     ELSE IF OP_CODE = "BWR" THEN                                       12109000          
         UNHANDLED_OP_CODE (HANDLE)                                     12110000          
     ELSE IF OP_CODE = "CAE" THEN                                       12111000          
         BEGIN                                                          12112000          
         BUILD_INSTRUCTION (HANDLE, B_CAE_OP, (ALL_ADD + N_VAR)) ;      12113000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12114000          
             B_ZERO ;                                                   12115000          
         END                                                            12116000          
     ELSE IF OP_CODE = "CAU" THEN                                       12117000          
         BEGIN                                                          12118000          
         BUILD_INSTRUCTION (HANDLE, B_CAU_OP, (ALL_ADD + N_VAR)) ;      12119000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12120000          
             B_FOUR ;                                                   12121000          
         END                                                            12122000          
     ELSE IF OP_CODE = "CNE" THEN                                       12123000          
         BEGIN                                                          12124000          
         BUILD_INSTRUCTION (HANDLE, B_CNE_OP, (ALL_ADD + N_VAR)) ;      12125000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12126000          
             B_TWO ;                                                    12127000          
         END                                                            12128000          
     ELSE IF OP_CODE = "CNU" THEN                                       12129000          
         BEGIN                                                          12130000          
         BUILD_INSTRUCTION (HANDLE, B_CNU_OP, (ALL_ADD + N_VAR)) ;      12131000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12132000          
             B_SIX ;                                                    12133000          
         END                                                            12134000          
     ELSE IF OP_CODE = "CRD" THEN                                       12135000          
         BEGIN                                                          12136000          
         BUILD_INSTRUCTION (HANDLE, B_CRD_OP, (ALL_ADD)) ;              12137000          
         REPLACE C_SOURCE_MEM_CODE_N (HANDLE) BY                        12138000          
             B_ONE ;                                                    12139000          
         END                                                            12140000          
     ELSE IF OP_CODE = "CTL" THEN                                       12141000          
         UNHANDLED_OP_CODE (HANDLE)                                     12142000          
     ELSE IF OP_CODE = "CZE" THEN                                       12143000          
         BEGIN                                                          12144000          
         BUILD_INSTRUCTION (HANDLE, B_CZE_OP, (ALL_ADD + N_VAR)) ;      12145000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12146000          
             B_ONE ;                                                    12147000          
         END                                                            12148000          
     ELSE IF OP_CODE = "CZU" THEN                                       12149000          
         BEGIN                                                          12150000          
         BUILD_INSTRUCTION (HANDLE, B_CZU_OP, (ALL_ADD + N_VAR)) ;      12151000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12152000          
             B_FIVE ;                                                   12153000          
         END                                                            12154000          
     ELSE IF OP_CODE = "DCI" THEN                                       12155000          
         BEGIN                                                          12156000          
         BUILD_INSTRUCTION (HANDLE, B_DCI_OP, (ALL_ADD + M_VAR)) ;      12157000          
         REPLACE C_SOURCE_MEM_CODE_N (HANDLE) BY                        12158000          
             C_SOURCE_N (HANDLE) + 1 FOR 1 ;    % No validation         12159000          
         END                                                            12160000          
     ELSE IF OP_CODE = "DCR" THEN                                       12161000          
         BEGIN                                                          12162000          
         BUILD_INSTRUCTION (HANDLE, B_DCR_OP, (ALL_ADD + M_VAR)) ;      12163000          
         REPLACE C_SOURCE_MEM_CODE_N (HANDLE) BY                        12164000          
             C_SOURCE_N (HANDLE) + 1 FOR 1 ;    % No validation         12165000          
         END                                                            12166000          
     ELSE IF OP_CODE = "DCW" THEN                                       12167000          
         BEGIN                                                          12168000          
         BUILD_INSTRUCTION (HANDLE, B_DCW_OP, (ALL_ADD + M_VAR)) ;      12169000          
         REPLACE C_SOURCE_MEM_CODE_N (HANDLE) BY                        12170000          
             C_SOURCE_N (HANDLE) + 1 FOR 1 ;    % No validation         12171000          
         END                                                            12172000          
     ELSE IF OP_CODE = "DFC" THEN                                       12173000          
         BEGIN                                                          12174000          
         BUILD_INSTRUCTION (HANDLE, B_DFR_OP, (ALL_ADD + N_VAR)) ;      12175000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12176000          
             B_FOUR ;                                                   12177000          
         END                                                            12178000          
     ELSE IF OP_CODE = "DFI" THEN                                       12179000          
         BEGIN                                                          12180000          
         BUILD_INSTRUCTION (HANDLE, B_DFR_OP, ALL_ADD) ;                12181000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12182000          
             B_EIGHT ;                                                  12183000          
         END                                                            12184000          
     ELSE IF OP_CODE = "DFR" THEN                                       12185000          
         BEGIN                                                          12186000          
         BUILD_INSTRUCTION (HANDLE, B_DFR_OP, (ALL_ADD + N_VAR)) ;      12187000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12188000          
             B_TWO ;                                                    12189000          
         END                                                            12190000          
     ELSE IF OP_CODE = "DFW" THEN                                       12191000          
         BEGIN                                                          12192000          
         BUILD_INSTRUCTION (HANDLE, B_DFR_OP, (ALL_ADD + N_VAR)) ;      12193000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12194000          
             B_ZERO ;                                                   12195000          
         END                                                            12196000          
     ELSE IF OP_CODE = "DIV" THEN                                       12197000          
         BEGIN                                                          12198000          
         BUILD_INSTRUCTION (HANDLE, B_DIV_OP, ALL_VAR_ADD) ;            12199000          
         END                                                            12200000          
     ELSE IF OP_CODE = "HLT" THEN                                       12201000          
         BEGIN                                                          12202000          
         BUILD_INSTRUCTION (HANDLE, B_HLT_OP, ALL_VAR_ADD) ;            12203000          
         END                                                            12204000          
     ELSE IF OP_CODE = "ICP" THEN                                       12205000          
         BEGIN                                                          12206000          
         BUILD_INSTRUCTION (HANDLE, B_ICP_OP, (ALL_ADD + N_VAR)) ;      12207000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12208000          
             B_TWO ;                                                    12209000          
         END                                                            12210000          
     ELSE IF OP_CODE = "ICR" THEN                                       12211000          
         BEGIN                                                          12212000          
         BUILD_INSTRUCTION (HANDLE, B_ICR_OP, (ALL_ADD + N_VAR)) ;      12213000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12214000          
             B_ONE ;                                                    12215000          
         END                                                            12216000          
     ELSE IF OP_CODE = "ILP" THEN                                       12217000          
         BEGIN                                                          12218000          
         BUILD_INSTRUCTION (HANDLE, B_ILP_OP, (ALL_ADD + N_VAR)) ;      12219000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12220000          
             B_THREE ;                                                  12221000          
         END                                                            12222000          
     ELSE IF OP_CODE = "IMR" THEN                                       12223000          
         BEGIN                                                          12224000          
         BUILD_INSTRUCTION (HANDLE, B_IMR_OP, (ALL_ADD + N_VAR)) ;      12225000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12226000          
             B_EIGHT ;                                                  12227000          
         END                                                            12228000          
     ELSE IF OP_CODE = "IMW" THEN                                       12229000          
         BEGIN                                                          12230000          
         BUILD_INSTRUCTION (HANDLE, B_IMW_OP, (ALL_ADD + N_VAR)) ;      12231000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12232000          
             B_NINE ;                                                   12233000          
         END                                                            12234000          
     ELSE IF OP_CODE = "IPL" THEN                                       12235000          
         BEGIN                                                          12236000          
         BUILD_INSTRUCTION (HANDLE, B_IPL_OP, (ALL_ADD + N_VAR)) ;      12237000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12238000          
             B_THREE ;                                                  12239000          
         END                                                            12240000          
     ELSE IF OP_CODE = "IPP" THEN                                       12241000          
         BEGIN                                                          12242000          
         BUILD_INSTRUCTION (HANDLE, B_IPP_OP, (ALL_ADD + N_VAR)) ;      12243000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12244000          
             B_TWO ;                                                    12245000          
         END                                                            12246000          
     ELSE IF OP_CODE = "IPR" THEN                                       12247000          
         BEGIN                                                          12248000          
         BUILD_INSTRUCTION (HANDLE, B_IPR_OP, (ALL_ADD + N_VAR)) ;      12249000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12250000          
             B_ONE ;                                                    12251000          
         END                                                            12252000          
     ELSE IF OP_CODE = "ISP" THEN                                       12253000          
         BEGIN                                                          12254000          
         BUILD_INSTRUCTION (HANDLE, B_ISP_OP, (ALL_ADD + N_VAR)) ;      12255000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12256000          
             B_FOUR ;                                                   12257000          
         END                                                            12258000          
     ELSE IF OP_CODE = "MWR" THEN                                       12259000          
         UNHANDLED_OP_CODE (HANDLE)                                     12260000          
     ELSE IF OP_CODE = "MSK" THEN                                       12261000          
         BEGIN                                                          12262000          
         BUILD_INSTRUCTION (HANDLE, B_MSK_OP, (ALL_ADD + M_VAR)) ;      12263000          
         END                                                            12264000          
     ELSE IF OP_CODE = "MUL" THEN                                       12265000          
         BEGIN                                                          12266000          
         BUILD_INSTRUCTION (HANDLE, B_MUL_OP, ALL_VAR_ADD) ;            12267000          
         END                                                            12268000          
     ELSE IF OP_CODE = "NOP" THEN                                       12269000          
         BEGIN                                                          12270000          
         BUILD_INSTRUCTION (HANDLE, B_NOP_OP, ALL_VAR_ADD) ;            12271000          
         END                                                            12272000          
     ELSE IF OP_CODE = "PCH" THEN                                       12273000          
         BEGIN                                                          12274000          
         BUILD_INSTRUCTION (HANDLE, B_PCH_OP, (ALL_ADD + M_VAR)) ;      12275000          
         END                                                            12276000          
     ELSE IF OP_CODE = "PRD" THEN                                       12277000          
         UNHANDLED_OP_CODE (HANDLE)                                     12278000          
     ELSE IF OP_CODE = "PRW" THEN                                       12279000          
         UNHANDLED_OP_CODE (HANDLE)                                     12280000          
     ELSE IF OP_CODE = "PSB" THEN                                       12281000          
         UNHANDLED_OP_CODE (HANDLE)                                     12282000          
     ELSE IF OP_CODE = "PSF" THEN                                       12283000          
         UNHANDLED_OP_CODE (HANDLE)                                     12284000          
     ELSE IF OP_CODE = "PWR" THEN                                       12285000          
         UNHANDLED_OP_CODE (HANDLE)                                     12286000          
     ELSE IF OP_CODE = "PRL" THEN                                       12287000          
         UNHANDLED_OP_CODE (HANDLE)                                     12288000          
     ELSE IF OP_CODE = "PRT" THEN                                       12289000          
         BEGIN                                                          12290000          
         BUILD_INSTRUCTION (HANDLE, B_PRT_OP, ALL_ADD + N_VAR) ;        12291000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12292000          
             C_SOURCE_M (HANDLE) + 1 FOR 1      % No validation         12293000          
                 WITH C_TO_B ;                                          12294000          
         END                                                            12295000          
     ELSE IF OP_CODE = "RSB" THEN                                       12296000          
         BEGIN                                  % Rset bit              12297000          
         BUILD_INSTRUCTION (HANDLE, B_RSB_OP, C_ADD) ;                  12298000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12299000          
             C_SOURCE_M (HANDLE) + 1 FOR 1      % No validation         12300000          
                 WITH C_TO_B ;                                          12301000          
         REPLACE C_SOURCE_MEM_CODE_N (HANDLE) BY                        12302000          
             B_AT ;                                                     12303000          
         END                                                            12304000          
     ELSE IF OP_CODE = "RWD" THEN                                       12305000          
         UNHANDLED_OP_CODE (HANDLE)                                     12306000          
     ELSE IF OP_CODE = "SBT" THEN                                       12307000          
         BEGIN                                  % Set bit               12308000          
         BUILD_INSTRUCTION (HANDLE, B_SBT_OP, C_ADD) ;                  12309000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12310000          
             C_SOURCE_M (HANDLE) + 1 FOR 1      % No validation         12311000          
                 WITH C_TO_B ;                                          12312000          
         REPLACE C_SOURCE_MEM_CODE_N (HANDLE) BY                        12313000          
             B_POUND ;                                                  12314000          
         END                                                            12315000          
     ELSE IF OP_CODE = "SPO" THEN                                       12316000          
         BEGIN                                                          12317000          
         BUILD_INSTRUCTION (HANDLE, B_SPO_OP, ALL_ADD) ;                12318000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12319000          
             B_ONE ;                                                    12320000          
         END                                                            12321000          
     ELSE IF OP_CODE = "SKL" THEN                                       12322000          
         UNHANDLED_OP_CODE (HANDLE)                                     12323000          
     ELSE IF OP_CODE = "SKP" THEN                                       12324000          
         BEGIN                                                          12325000          
         BUILD_INSTRUCTION (HANDLE, B_SKP_OP, ALL_ADD + N_VAR) ;        12326000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12327000          
             C_SOURCE_M (HANDLE) + 1 FOR 1 ;    % No validation         12328000          
         END                                                            12329000          
     ELSE IF OP_CODE = "SRD" THEN                                       12330000          
         UNHANDLED_OP_CODE (HANDLE)                                     12331000          
     ELSE IF OP_CODE = "SRF" THEN                                       12332000          
         UNHANDLED_OP_CODE (HANDLE)                                     12333000          
     ELSE IF OP_CODE = "SUB" THEN                                       12334000          
         BEGIN                                                          12335000          
         BUILD_INSTRUCTION (HANDLE, B_SUB_OP, ALL_VAR_ADD) ;            12336000          
         END                                                            12337000          
     ELSE IF OP_CODE = "SPR" THEN                                       12338000          
         BEGIN                                                          12339000          
         BUILD_INSTRUCTION (HANDLE, B_SPR_OP, ALL_ADD) ;                12340000          
         REPLACE C_SOURCE_MEM_CODE_M (HANDLE) BY                        12341000          
             B_TWO ;                                                    12342000          
         END                                                            12343000          
     ELSE IF OP_CODE = "TCB" THEN                                       12344000          
         BEGIN                                                          12345000          
         BUILD_INSTRUCTION (HANDLE, B_TCB_OP, ALL_VAR_ADD) ;            12346000          
         TRANSFER_CONDITION (HANDLE) ;                                  12347000          
         B_SET_B_BIT (C_SOURCE_MEM_CODE_M (HANDLE)) ;                   12348000          
         END                                                            12349000          
     ELSE IF OP_CODE = "TER" THEN                                       12350000          
         UNHANDLED_OP_CODE (HANDLE)                                     12351000          
     ELSE IF OP_CODE = "TFR" THEN                                       12352000          
         BEGIN                                                          12353000          
         BUILD_INSTRUCTION (HANDLE, B_TFR_OP, ALL_VAR_ADD) ;            12354000          
         TRANSFER_CONDITION (HANDLE) ;                                  12355000          
         END                                                            12356000          
     ELSE IF OP_CODE = "TFZ" THEN                                       12357000          
         BEGIN                                                          12358000          
         BUILD_INSTRUCTION (HANDLE, B_TFZ_OP, ALL_VAR_ADD) ;            12359000          
         TRANSFER_CONDITION (HANDLE) ;                                  12360000          
         END                                                            12361000          
     ELSE IF OP_CODE = "TRD" THEN                                       12362000          
         UNHANDLED_OP_CODE (HANDLE)                                     12363000          
     ELSE IF OP_CODE = "TWR" THEN                                       12364000          
         UNHANDLED_OP_CODE (HANDLE)                                     12365000          
     ELSE IF OP_CODE = "TZB" THEN                                       12366000          
         BEGIN                                                          12367000          
         BUILD_INSTRUCTION (HANDLE, B_TZB_OP, ALL_VAR_ADD) ;            12368000          
         TRANSFER_CONDITION (HANDLE) ;                                  12369000          
         B_SET_B_BIT (C_SOURCE_MEM_CODE_M (HANDLE)) ;                   12370000          
         END                                                            12371000          
     ELSE IF OP_CODE = "SLA"                                            12372000          
     OR OP_CODE = "SLI"                                                 12373000          
     OR OP_CODE = "ALC"                                                 12374000          
     OR OP_CODE = "LNK" THEN                                            12375000          
         BEGIN                          % Handled in FIRST_PASS         12376000          
         PRINT_MEMORY_LOCATION := FALSE ;                               12377000          
         END                                                            12378000          
     ELSE IF OP_CODE = "END" THEN                                       12379000          
         BEGIN                          % END OF SOURCE                 12380000          
         PRINT_MEMORY_LOCATION := FALSE ;                               12381000          
         END                                                            12382000          
     ELSE                                                               12383000          
         BEGIN                                                          12384000          
         BUILD_ERROR_OP_CODE (HANDLE) ;                                 12385000          
         END ;                                                          12386000          
%---- Print                                                             12387000          
     IF LINE_COUNT >= LINE_COUNT_MAX THEN                               12388000          
         BEGIN                                                          12389000          
         SECOND_PASS_HEADING ;                                          12390000          
         END ;                                                          12391000          
%                                                                       12392000          
     REPLACE PRINT_RECORD BY                                            12393000          
         " " FOR SIZE (PRINT_RECORD) ;                                  12394000          
     IF PRINT_FORMATTED_SOURCE THEN                                     12395000          
         BEGIN                                                          12396000          
         REPLACE PRINT_RECORD [PRINT_ERRORS_OFFSET] BY                  12397000          
             C_SOURCE_ERRORS (HANDLE) FOR C_SOURCE_ERRORS_LENGTH ;      12398000          
         IF PRINT_MEMORY_LOCATION THEN                                  12399000          
             BEGIN                                                      12400000          
             C_INDEX_TO_B_ADDRESS (C_SOURCE_MEM_INDEX (HANDLE) ,        12401000          
                                   ADDRESS_WORK) ;                      12402000          
             REPLACE PRINT_RECORD [PRINT_MEM_ADDR_OFFSET] BY            12403000          
                 ADDRESS_WORK FOR 3                                     12404000          
                     WITH B_TO_C ;                                      12405000          
             END ;                                                      12406000          
         REPLACE PRINT_RECORD [PRINT_MEM_FIELD_OFFSET] BY               12407000          
             C_SOURCE_MEM_CODE (HANDLE)                                 12408000          
                 FOR MIN (C_SOURCE_MEM_LENGTH (HANDLE), 12)             12409000          
                     WITH B_TO_C ;                                      12410000          
         REPLACE PRINT_RECORD [PRINT_OP_CODE_OFFSET] BY                 12411000          
             C_SOURCE_OP_CODE (HANDLE) FOR 3 ;                          12412000          
%REPLACE C_SOURCE_B_ADDRESS (0) BY                                      12413000          
         REPLACE PRINT_RECORD [PRINT_M_VAR_OFFSET] BY                   12414000          
             C_SOURCE_M (HANDLE) FOR 2 ;                                12415000          
         REPLACE PRINT_RECORD [PRINT_N_VAR_OFFSET] BY                   12416000          
             C_SOURCE_N (HANDLE) FOR 2 ;                                12417000          
         REPLACE PRINT_RECORD [PRINT_A_ADDR_OFFSET] BY                  12418000          
             C_SOURCE_A_ADDRESS (HANDLE) FOR 4 ;                        12419000          
         REPLACE PRINT_RECORD [PRINT_B_ADDR_OFFSET] BY                  12420000          
             C_SOURCE_B_ADDRESS (HANDLE) FOR 4 ;                        12421000          
         REPLACE PRINT_RECORD [PRINT_C_ADDR_OFFSET] BY                  12422000          
             C_SOURCE_C_ADDRESS (HANDLE) FOR 4 ;                        12423000          
         REPLACE PRINT_RECORD [PRINT_PAGE_OFFSET] BY                    12424000          
             C_SOURCE_PAGE (HANDLE) FOR 2 ;                             12425000          
         REPLACE PRINT_RECORD [PRINT_REF_OFFSET] BY                     12426000          
             C_SOURCE_REFERENCE (HANDLE) FOR 1 ;                        12427000          
         REPLACE PRINT_RECORD [PRINT_SIZE_OFFSET] BY                    12428000          
             C_SOURCE_SIZE (HANDLE) FOR 3 ;                             12429000          
         REPLACE PRINT_RECORD [PRINT_CONST_OFFSET] BY                   12430000          
             C_SOURCE_CONSTANTS (HANDLE) FOR 12 ;                       12431000          
         REPLACE PRINT_RECORD [PRINT_REMARKS_OFFSET] BY                 12432000          
             C_SOURCE_REMARKS (HANDLE) FOR 35 ;                         12433000          
         REPLACE PRINT_RECORD [PRINT_CARD_NUMBER_OFFSET] BY             12434000          
             STRING (C_SOURCE_CARD_NUMBER (HANDLE), 4) ;                12435000          
         END                                                            12436000          
     ELSE                                                               12437000          
         BEGIN                                                          12438000          
         REPLACE PRINT_RECORD [PRINT_OP_CODE_OFFSET] BY                 12439000          
             C_SOURCE_OP_CODE (HANDLE) FOR 74 ;                         12440000          
         REPLACE PRINT_RECORD [PRINT_CARD_NUMBER_OFFSET] BY             12441000          
             STRING (C_SOURCE_CARD_NUMBER (HANDLE), 4) ;                12442000          
         END ;                                                          12443000          
     WRITE (PRINTOUT, SIZE (PRINT_RECORD), PRINT_RECORD) ;              12444000          
     LINE_COUNT := * + 1 ;                                              12445000          
     END ;                                                              12446000          
%                                                                       12447000          
 WRITE (PRINTOUT [SPACE 2], 0, PRINT_RECORD) ;                          12448000          
 REPLACE PRINT_RECORD BY                                                12449000          
     " " FOR SIZE (PRINT_RECORD) ;                                      12450000          
 REPLACE PRINT_RECORD BY                % Number of cards processed     12451000          
     "CARDS PROCESSED:   " ,                                            12452000          
     STRING (C_CARD_COUNT, 6) ;                                         12453000          
 WRITE (PRINTOUT [SPACE 1], SIZE (PRINT_RECORD), PRINT_RECORD) ;        12454000          
 REPLACE PRINT_RECORD BY                                                12455000          
     " " FOR SIZE (PRINT_RECORD) ;                                      12456000          
 REPLACE PRINT_RECORD BY                % Number of references          12457000          
     "SOURCE REFERENCES: " ,                                            12458000          
     STRING (REFERENCE_HANDLE_NEXT, 6) ;                                12459000          
 WRITE (PRINTOUT [SPACE 1], SIZE (PRINT_RECORD), PRINT_RECORD) ;        12460000          
 REPLACE PRINT_RECORD BY                                                12461000          
     " " FOR SIZE (PRINT_RECORD) ;                                      12462000          
 REPLACE PRINT_RECORD BY                % Memory used                   12463000          
     "MEMORY USED:       " ,                                            12464000          
     STRING (C_MEMORY_INDEX_MAX, 6) ;                                   12465000          
 WRITE (PRINTOUT [SPACE 1], SIZE (PRINT_RECORD), PRINT_RECORD) ;        12466000          
%                                                                       12467000          
 IF C_ERROR_COUNT > 0 THEN                                              12468000          
     BEGIN                                                              12469000          
     REPLACE PRINT_RECORD BY                                            12470000          
         " " FOR SIZE (PRINT_RECORD) ;                                  12471000          
     REPLACE PRINT_RECORD BY            % Number of errors              12472000          
         "ERRORS:            " ,                                        12473000          
         STRING (C_ERROR_COUNT, 6) ;                                    12474000          
     WRITE (PRINTOUT [SPACE 1], SIZE (PRINT_RECORD), PRINT_RECORD) ;    12475000          
     END ;                                                              12476000          
%----                                                                   12477000          
%---- Build B300 memory image                                           12478000          
%----                                                                   12479000          
 FOR HANDLE := 0                                                        12480000          
          STEP C_SOURCE_REC_LEN                                         12481000          
          WHILE ^ SOURCE_END                                            12482000          
              CAND HANDLE < C_SOURCE_HANDLE DO                          12483000          
     BEGIN                                                              12484000          
     IF C_SOURCE_MEM_LENGTH (HANDLE) > 0 THEN                           12485000          
         BEGIN                                                          12486000          
         REPLACE B_MEMORY [C_SOURCE_MEM_INDEX (HANDLE)]                 12487000          
             BY C_SOURCE_MEM_CODE (HANDLE)                              12488000          
                 FOR MIN (C_SOURCE_MEM_LENGTH (HANDLE), 12) ;           12489000          
         END ;                                                          12490000          
     END ;                                                              12491000          
%                                                                       12492000          
 END SECOND_PASS ;                                                      12493000          
%                                                                       12494000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%12495000          
%                                                                       12496000          
%-----------------------------------------------------------------------12497000          
% REFERENCE_LISTING                                                     12498000          
%-----------------------------------------------------------------------12499000          
 PROCEDURE REFERENCE_LISTING ;                                          12500000          
 BEGIN                                                                  12501000          
%                                                                       12502000          
 INTEGER                                                                12503000          
     LINE_COUNT                                                         12504000          
     ;                                                                  12505000          
 POINTER                                                                12506000          
     PRINT_PTR                                                          12507000          
     ;                                                                  12508000          
%------------------------                                               12509000          
 PROCEDURE REFERENCE_LISTING_HEADING ;                                  12510000          
 BEGIN                                                                  12511000          
%                                                                       12512000          
 LINE_COUNT := PRINT_HEADING ;                                          12513000          
%                                                                       12514000          
 REPLACE PRINT_RECORD BY                                                12515000          
     " " FOR SIZE (PRINT_RECORD) ;                                      12516000          
 REPLACE PRINT_RECORD BY                                                12517000          
     "REFERENCE LISTING" ;                                              12518000          
 WRITE (PRINTOUT [SPACE 2], SIZE (PRINT_RECORD), PRINT_RECORD) ;        12519000          
 LINE_COUNT := * + 2 ;                                                  12520000          
%                                                                       12521000          
 REPLACE PRINT_RECORD BY                                                12522000          
     " " FOR SIZE (PRINT_RECORD) ;                                      12523000          
 REPLACE PRINT_RECORD BY                                                12524000          
     "    REF   CRD# COUNT" ;                                           12525000          
 WRITE (PRINTOUT [SPACE 1], SIZE (PRINT_RECORD), PRINT_RECORD) ;        12526000          
 LINE_COUNT := * + 1 ;                                                  12527000          
%                                                                       12528000          
 END REFERENCE_LIST_HEADING ;                                           12529000          
%                                                                       12530000          
%-----------------------------------------------------------------------12531000          
 PROCEDURE REFERENCE_PRINT                                              12532000          
     (                                                                  12533000          
     NODE                                                               12534000          
     ) ;                                                                12535000          
 VALUE                                                                  12536000          
     NODE                                                               12537000          
     ;                                                                  12538000          
 INTEGER                                                                12539000          
     NODE                                                               12540000          
     ;                                                                  12541000          
 BEGIN                                                                  12542000          
%                                                                       12543000          
 INTEGER                                                                12544000          
     HANDLE                                                             12545000          
     ;                                                                  12546000          
 IF NODE >= 0 THEN                                                      12547000          
     BEGIN                                                              12548000          
     REFERENCE_PRINT (REFERENCE_NODE_LOW (NODE)) ;                      12549000          
     IF LINE_COUNT > LINE_COUNT_MAX THEN                                12550000          
         BEGIN                                                          12551000          
         REFERENCE_LISTING_HEADING ;                                    12552000          
         END ;                                                          12553000          
     HANDLE := REFERENCE_NODE_HANDLE (NODE) ;                           12554000          
     REPLACE PRINT_RECORD BY                                            12555000          
         " " FOR SIZE (PRINT_RECORD) ;                                  12556000          
     REPLACE PRINT_RECORD BY                                            12557000          
         "    " ,                                                       12558000          
         C_SOURCE_PAGE (HANDLE) FOR 3 ,                                 12559000          
         "   " ,                                                        12560000          
         STRING (C_SOURCE_CARD_NUMBER (HANDLE), 4) ,                    12561000          
         "  " ,                                                         12562000          
         STRING (REFERENCE_NODE_COUNT (NODE), 4) ;                      12563000          
     WRITE (PRINTOUT [SPACE 1], SIZE (PRINT_RECORD), PRINT_RECORD) ;    12564000          
     LINE_COUNT := * + 1 ;                                              12565000          
     REFERENCE_PRINT (REFERENCE_NODE_HIGH (NODE)) ;                     12566000          
     END ;                                                              12567000          
%                                                                       12568000          
 END REFERENCE_PRINT ;                                                  12569000          
%---------------------------                                            12570000          
% REFERENCE_LISTING - MAIN                                              12571000          
%---------------------------                                            12572000          
%                                                                       12573000          
 REFERENCE_LISTING_HEADING ;                                            12574000          
%                                                                       12575000          
 REFERENCE_PRINT (REFERENCE_INDEX_ROOT) ;                               12576000          
%                                                                       12577000          
 END REFERENCE_LISTING ;                                                12578000          
%                                                                       12579000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%12580000          
%                                                                       12581000          
%-----------------------------------------------------------------------12582000          
% DUMP_MEMORY_MAP                                                       12583000          
%-----------------------------------------------------------------------12584000          
 PROCEDURE DUMP_MEMORY_MAP ;                                            12585000          
 BEGIN                                                                  12586000          
%                                                                       12587000          
 INTEGER                                                                12588000          
     LINE_COUNT ,                                                       12589000          
     MEMORY_IDX ,                                                       12590000          
     DISPLAY_IDX                                                        12591000          
     ;                                                                  12592000          
 POINTER                                                                12593000          
     PRINT_PTR                                                          12594000          
     ;                                                                  12595000          
%------------------------                                               12596000          
 PROCEDURE MEMORY_MAP_HEADING ;                                         12597000          
 BEGIN                                                                  12598000          
%                                                                       12599000          
 LINE_COUNT := PRINT_HEADING ;                                          12600000          
%                                                                       12601000          
 REPLACE PRINT_RECORD BY                                                12602000          
     " " FOR SIZE (PRINT_RECORD) ;                                      12603000          
 REPLACE PRINT_RECORD BY                                                12604000          
     "B300 MEMORY MAP:" ;                                               12605000          
 WRITE (PRINTOUT [SPACE 2], SIZE (PRINT_RECORD), PRINT_RECORD) ;        12606000          
 LINE_COUNT := * + 2 ;                                                  12607000          
 REPLACE PRINT_RECORD BY                                                12608000          
     "DECIMAL"                                                          12609000          
       " LOC CODE........"                                              12610000          
     "   LOC CODE........"                                              12611000          
     "   LOC CODE........"                                              12612000          
     "   LOC CODE........"                                              12613000          
     "   LOC CODE........" ;                                            12614000          
%    "   LOC CODE........" ;                                            12615000          
 WRITE (PRINTOUT [SPACE 1], SIZE (PRINT_RECORD), PRINT_RECORD) ;        12616000          
 LINE_COUNT := * + 1 ;                                                  12617000          
%                                                                       12618000          
 END MEMORY_MAP_HEADING ;                                               12619000          
%                                                                       12620000          
%------------------------                                               12621000          
% DUMP_MEMORY_MAP - MAIN                                                12622000          
%------------------------                                               12623000          
%                                                                       12624000          
 MEMORY_MAP_HEADING ;                                                   12625000          
%                                                                       12626000          
 MEMORY_IDX := 0 ;                                                      12627000          
 WHILE MEMORY_IDX < C_MEMORY_INDEX_MAX DO                               12628000          
     BEGIN                                                              12629000          
%                                                                       12630000          
     IF LINE_COUNT >= LINE_COUNT_MAX THEN                               12631000          
         BEGIN                                                          12632000          
         MEMORY_MAP_HEADING ;                                           12633000          
         END ;                                                          12634000          
%                                                                       12635000          
     REPLACE PRINT_RECORD BY                                            12636000          
         " " FOR SIZE (PRINT_RECORD) ;                                  12637000          
     REPLACE PRINT_RECORD BY                                            12638000          
         STRING (MEMORY_IDX, 5) ,                                       12639000          
         ":" ;                                                          12640000          
     PRINT_PTR := PRINT_RECORD [8] ;                                    12641000          
     FOR DISPLAY_IDX := 1 STEP 1 UNTIL 5 DO                             12642000          
         BEGIN                                                          12643000          
         C_INDEX_TO_B_ADDRESS (MEMORY_IDX, ADDRESS_WORK) ;              12644000          
         REPLACE PRINT_PTR BY           % Field location address        12645000          
             ADDRESS_WORK FOR 3                                         12646000          
                 WITH B_TO_C ;                                          12647000          
         REPLACE PRINT_PTR + 4 BY       % Field data                    12648000          
             B_MEMORY [MEMORY_IDX] FOR 12                               12649000          
                 WITH B_TO_C ;                                          12650000          
         PRINT_PTR := * + 19 ;          % Next column                   12651000          
         MEMORY_IDX := * + 12 ;         % Next memory field             12652000          
         END ;                                                          12653000          
     WRITE (PRINTOUT [SPACE 1], SIZE (PRINT_RECORD), PRINT_RECORD) ;    12654000          
     END ;                                                              12655000          
%                                                                       12656000          
 END DUMP_MEMORY_MAP ;                                                  12657000          
%                                                                       12658000          
%-----------------------------------------------------------------------12659000          
% BUILD_OBJECT_DECK                                                     12660000          
%-----------------------------------------------------------------------12661000          
 PROCEDURE BUILD_OBJECT_DECK ;                                          12662000          
 BEGIN                                                                  12663000          
%                                                                       12664000          
 INTEGER                                                                12665000          
     MEMORY_IDX ,                                                       12666000          
     MEMORY_IDX_END                                                     12667000          
     ;                                                                  12668000          
 OPEN (OBJECT) ;                                                        12669000          
%                                                                       12670000          
 MEMORY_IDX_END := C_MEMORY_INDEX_MAX ;                                 12671000          
 IF C_MEMORY_INDEX_MAX MOD 60 > 0 THEN                                  12672000          
     BEGIN                                                              12673000          
     MEMORY_IDX_END := * + (60 - (C_MEMORY_INDEX_MAX MOD 60)) ;         12674000          
     END ;                                                              12675000          
%                                                                       12676000          
 FOR MEMORY_IDX := 0 STEP 60 WHILE MEMORY_IDX                           12677000          
                                 < MEMORY_IDX_END       DO              12678000          
     BEGIN                                                              12679000          
     REPLACE OBJECT_RECORD BY                                           12680000          
         " " FOR 80 ;                                                   12681000          
     REPLACE OBJECT_RECORD BY       % Object data                       12682000          
         B_MEMORY [MEMORY_IDX] FOR 60                                   12683000          
             WITH B_TO_C ;                                              12684000          
     WRITE (OBJECT, 80, OBJECT_RECORD) ;                                12685000          
     END ;                                                              12686000          
%                                                                       12687000          
 CLOSE (OBJECT, CRUNCH) ;                                               12688000          
%                                                                       12689000          
 END BUILD_OBJECT_DECK ;                                                12690000          
%                                                                       12691000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%12692000          
%                                                                       12693000          
%-----------------------------------------------------------------------12694000          
% INITIALIZE                                                            12695000          
%-----------------------------------------------------------------------12696000          
 PROCEDURE INITIALIZE ;                                                 12697000          
 BEGIN                                                                  12698000          
%                                                                       12699000          
 REAL                                                                   12700000          
     TIME_7                                                             12701000          
     ;                                                                  12702000          
 REPLACE B_ADDRESS_SECTIONS BY                                          12703000          
     B_000000 ,         % 0-9                                           12704000          
     B_000001 ,                                                         12705000          
     B_000010 ,                                                         12706000          
     B_000011 ,                                                         12707000          
     B_000100 ,                                                         12708000          
     B_000101 ,                                                         12709000          
     B_000110 ,                                                         12710000          
     B_000111 ,                                                         12711000          
     B_001000 ,                                                         12712000          
     B_001001 ,                                                         12713000          
     B_010000 ,         % +0                                            12714000          
     B_010001 ,         % A-I                                           12715000          
     B_010010 ,                                                         12716000          
     B_010011 ,                                                         12717000          
     B_010100 ,                                                         12718000          
     B_010101 ,                                                         12719000          
     B_010110 ,                                                         12720000          
     B_010111 ,                                                         12721000          
     B_011000 ,                                                         12722000          
     B_011001 ,                                                         12723000          
     B_100000 ,         % -0                                            12724000          
     B_100001 ,         % J-R                                           12725000          
     B_100010 ,                                                         12726000          
     B_100011 ,                                                         12727000          
     B_100100 ,                                                         12728000          
     B_100101 ,                                                         12729000          
     B_100110 ,                                                         12730000          
     B_100111 ,                                                         12731000          
     B_101000 ,                                                         12732000          
     B_101001 ,                                                         12733000          
     B_110000 ,         % Blank                                         12734000          
     B_110001 ,         % / S-Z                                         12735000          
     B_110010 ,                                                         12736000          
     B_110011 ,                                                         12737000          
     B_110100 ,                                                         12738000          
     B_110101 ,                                                         12739000          
     B_110110 ,                                                         12740000          
     B_110111 ,                                                         12741000          
     B_111000 ,                                                         12742000          
     B_111001 ;                                                         12743000          
%                                                                       12744000          
 REPLACE B_ADDRESS_FIELDS BY                                            12745000          
     B_000000 ,         % 0-9                                           12746000          
     B_000001 ,                                                         12747000          
     B_000010 ,                                                         12748000          
     B_000011 ,                                                         12749000          
     B_000100 ,                                                         12750000          
     B_000101 ,                                                         12751000          
     B_000110 ,                                                         12752000          
     B_000111 ,                                                         12753000          
     B_001000 ,                                                         12754000          
     B_001001 ;                                                         12755000          
%                                                                       12756000          
 REPLACE B_ADDRESS_CHARS BY                                             12757000          
     B_000000 ,         % 0-9                                           12758000          
     B_000001 ,                                                         12759000          
     B_000010 ,                                                         12760000          
     B_000011 ,                                                         12761000          
     B_000100 ,                                                         12762000          
     B_000101 ,                                                         12763000          
     B_000110 ,                                                         12764000          
     B_000111 ,                                                         12765000          
     B_001000 ,                                                         12766000          
     B_001001 ,                                                         12767000          
     B_001010 ,         % #,@                                           12768000          
     B_001011 ;                                                         12769000          
%                                                                       12770000          
 TIME_7 := TIME (7) ;                                                   12771000          
 REPLACE MM_DD_YY BY                                                    12772000          
      STRING (TIME_7.[35:06], 2) ,                                      12773000          
      "/" ,                                                             12774000          
      STRING (TIME_7.[29:06], 2) ,                                      12775000          
      "/" ,                                                             12776000          
      STRING ((TIME_7.[47:12] MOD 100), 2) ;                            12777000          
 REPLACE MM_DD_YY BY                                                    12778000          
      MM_DD_YY FOR SIZE (MM_DD_YY)                                      12779000          
          WITH SPACE_TO_ZERO ;                                          12780000          
%----                                                                   12781000          
%---- Set up LNK templates                                              12782000          
%----                                                                   12783000          
 REPLACE C_SOURCE_IDENT (0) BY          % TRF ret loc to subroutine     12784000          
     " " FOR 80 ;                                                       12785000          
 REPLACE C_SOURCE_OP_CODE (0) BY                                        12786000          
     "TFR" ;                                                            12787000          
 REPLACE C_SOURCE_N (0) BY                                              12788000          
     "03" ;                                                             12789000          
 REPLACE C_SOURCE_A_ADDRESS (0) BY                                      12790000          
     "  *B" ;                                                           12791000          
 REPLACE C_SOURCE_B_ADDRESS (0) BY                                      12792000          
     "  *K" ;                                                           12793000          
 REPLACE C_SOURCE_REMARKS (0) BY                                        12794000          
     "LNK INSERTED 1" ;                                                 12795000          
 REPLACE LINK_SOURCE_1 BY                                               12796000          
     C_SOURCE_IDENT (0) FOR 80 ;                                        12797000          
%                                                                       12798000          
 REPLACE C_SOURCE_IDENT (0) BY          % BRU to subroutine + 1 inst    12799000          
     " " FOR 80 ;                                                       12800000          
 REPLACE C_SOURCE_OP_CODE (0) BY                                        12801000          
     "BRU" ;                                                            12802000          
 REPLACE C_SOURCE_REMARKS (0) BY                                        12803000          
     "LNK INSERTED 2" ;                                                 12804000          
 REPLACE LINK_SOURCE_2 BY                                               12805000          
     C_SOURCE_IDENT (0) FOR 80 ;                                        12806000          
%----                                                                   12807000          
%---- Index / Counts                                                    12808000          
%----                                                                   12809000          
 C_CARD_COUNT := 0 ;                                                    12810000          
 C_ERROR_COUNT := 0 ;                                                   12811000          
 C_MEMORY_INDEX := 0 ;                                                  12812000          
 C_MEMORY_INDEX_MAX := C_MEMORY_INDEX ;                                 12813000          
 REFERENCE_HANDLE_NEXT := 0 ;                                           12814000          
%----                                                                   12815000          
%---- Printer headings                                                  12816000          
%----                                                                   12817000          
 PAGE_NUMBER := 0 ;                                                     12818000          
 REPLACE PRINT_HEADING_1 BY                                             12819000          
     " " FOR SIZE (PRINT_HEADING_1) ;                                   12820000          
 REPLACE PRINT_HEADING_1 [0] BY                                         12821000          
     "VERSION: " ,                                                      12822000          
     STRING (COMPILETIME (20), *) ,                                     12823000          
     "." ,                                                              12824000          
     STRING (COMPILETIME (21), *) ,                                     12825000          
     "." ,                                                              12826000          
     STRING (COMPILETIME (22), *) ;                                     12827000          
 REPLACE PRINT_HEADING_1 [43] BY                                        12828000          
     "     BURROUGHS BASIC ASSEMBLER          " ;                       12829000          
 REPLACE PRINT_HEADING_1 [86] BY                                        12830000          
     "    AS OF: " ,                                                    12831000          
     MM_DD_YY FOR 8 ,                                                   12832000          
     "                  PAGE XXXX" ;                                    12833000          
%                                                                       12834000          
 REPLACE PRINT_HEADING_2 BY                                             12835000          
     " " FOR SIZE (PRINT_HEADING_2) ;                                   12836000          
 REPLACE PRINT_HEADING_2 [PRINT_ERRORS_OFFSET] BY       % ERRORS        12837000          
     "ERRORS......" ;                                                   12838000          
 REPLACE PRINT_HEADING_2 [PRINT_MEM_ADDR_OFFSET] BY     % LOC           12839000          
     "LOC" ;                                                            12840000          
%    ADDRESS_WORK FOR 3                                                 12841000          
 REPLACE PRINT_HEADING_2 [PRINT_MEM_FIELD_OFFSET] BY    % CODE          12842000          
     "OMNAAABBBCCC" ;                                                   12843000          
%    C_SOURCE_MEM_CODE (HANDLE) FOR 12 ;                                12844000          
 REPLACE PRINT_HEADING_2 [PRINT_OP_CODE_OFFSET] BY      % OP CODE       12845000          
     "OP " ;                                                            12846000          
%    C_SOURCE_OP_CODE (HANDLE) FOR 3 ;                                  12847000          
 REPLACE PRINT_HEADING_2 [PRINT_M_VAR_OFFSET] BY        % M VAR         12848000          
     "MM" ;                                                             12849000          
%    C_SOURCE_M (HANDLE) FOR 2 ;                                        12850000          
 REPLACE PRINT_HEADING_2 [PRINT_N_VAR_OFFSET] BY        % N VAR         12851000          
     "NN" ;                                                             12852000          
%    C_SOURCE_N (HANDLE) FOR 2 ;                                        12853000          
 REPLACE PRINT_HEADING_2 [PRINT_A_ADDR_OFFSET] BY       % AAA ADDRESS   12854000          
     "AADR" ;                                                           12855000          
%    C_SOURCE_A_ADDRESS (HANDLE) FOR 4 ;                                12856000          
 REPLACE PRINT_HEADING_2 [PRINT_B_ADDR_OFFSET] BY       % BBB ADDRESS   12857000          
     "BADR" ;                                                           12858000          
%    C_SOURCE_B_ADDRESS (HANDLE) FOR 4 ;                                12859000          
 REPLACE PRINT_HEADING_2 [PRINT_C_ADDR_OFFSET] BY       % CCC ADDRESS   12860000          
     "CADR" ;                                                           12861000          
%    C_SOURCE_C_ADDRESS (HANDLE) FOR 4 ;                                12862000          
 REPLACE PRINT_HEADING_2 [PRINT_PAGE_OFFSET] BY         % PAGE          12863000          
     "PG" ;                                                             12864000          
%    C_SOURCE_PAGE (HANDLE) FOR 2 ;                                     12865000          
 REPLACE PRINT_HEADING_2 [PRINT_REF_OFFSET] BY          % REFERENCE     12866000          
     "R" ;                                                              12867000          
%    C_SOURCE_REFERENCE (HANDLE) FOR 1 ;                                12868000          
 REPLACE PRINT_HEADING_2 [PRINT_SIZE_OFFSET] BY         % SIZE          12869000          
     "SIZ" ;                                                            12870000          
%    C_SOURCE_SIZE (HANDLE) FOR 3 ;                                     12871000          
 REPLACE PRINT_HEADING_2 [PRINT_CONST_OFFSET] BY        % CONSTANTS     12872000          
     "CONSTANTS..." ;                                                   12873000          
%    C_SOURCE_CONSTANTS (HANDLE) FOR 12 ;                               12874000          
 REPLACE PRINT_HEADING_2 [PRINT_REMARKS_OFFSET] BY      % REMARKS       12875000          
     "REMARKS............................" ;                            12876000          
%    C_SOURCE_REMARKS (HANDLE) FOR 35 ;                                 12877000          
 REPLACE PRINT_HEADING_2 [PRINT_CARD_NUMBER_OFFSET] BY  % CARD NUMBER   12878000          
     "CRD#" ;                                                           12879000          
%                                                                       12880000          
 END INITIALIZE ;                                                       12881000          
%                                                                       12882000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%12883000          
% MAIN                                                                  12884000          
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%12885000          
%                                                                       12886000          
 INITIALIZE ;                                                           12887000          
%                                                                       12888000          
 FIRST_PASS ;                                                           12889000          
%                                                                       12890000          
 SECOND_PASS ;                                                          12891000          
%                                                                       12892000          
 REFERENCE_LISTING ;                                                    12893000          
%                                                                       12894000          
 DUMP_MEMORY_MAP ;                                                      12895000          
%                                                                       12896000          
 BUILD_OBJECT_DECK ;                                                    12897000          
%                                                                       12898000          
 END.                                                                   12899000          
